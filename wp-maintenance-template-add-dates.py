# -*- coding: utf-8 -*-
import pywikibot
import re
import mwparserfromhell
from datetime import datetime
from typing import Dict, List, Set, Tuple, Optional, Union
import platform
import time
import sys
from difflib import SequenceMatcher
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG = {
    'mode': 'rq',  # –†–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏: 'meta', 'single', 'rq', 'metarq'.
    'search_mode': 2,  # 1 - –ª–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫ –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ–≤–∏–∑–∏–∏, 2 - –ª–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫ –æ—Ç –ø–µ—Ä–≤–æ–π —Ä–µ–≤–∏–∑–∏–∏, 3 - –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –æ—Ç –ø–µ—Ä–≤–æ–π —Ä–µ–≤–∏–∑–∏–∏
    'max_revisions': 0,  # –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å—Ç–∞—Ç—å–∏, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≤–∏–∑–∏–π –ø—Ä–µ–≤—ã—à–∞–µ—Ç —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ (0 - –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)

    'debug_article': "",  # –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ, —Å–∫—Ä–∏–ø—Ç –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —ç—Ç—É —Å—Ç–∞—Ç—å—é —Å –ª–æ–≥–∏–∫–æ–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—âb–∏–º CONFIG['mode'].
    'debug_output': False,  # –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    'autosave': True,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å—Ç–∞—Ç—å–∏

    'meta_category': "–ö–∞—Ç–µ–≥–æ—Ä–∏—è:–û—Ç—Å–ª–µ–∂–∏–≤–∞—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:–°—Ç–∞—Ç—å–∏ —Å —à–∞–±–ª–æ–Ω–∞–º–∏-—Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –±–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –¥–∞—Ç",
    'single_category': "–ö–∞—Ç–µ–≥–æ—Ä–∏—è:–í–∏–∫–∏–ø–µ–¥–∏—è:–°—Ç–∞—Ç—å–∏, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –ø–æ–¥ —Å–æ–º–Ω–µ–Ω–∏–µ –±–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã",
    'rq_category': "–ö–∞—Ç–µ–≥–æ—Ä–∏—è:–í–∏–∫–∏–ø–µ–¥–∏—è:–°—Ç–∞—Ç—å–∏ –∫ –∑–∞–º–µ–Ω–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —à–∞–±–ª–æ–Ω–∞ rq",
}

# –®–∞–±–ª–æ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–¥–µ–ª–æ–≤
SECTION_TEMPLATES = [
    '–í —Ä–∞–∑–¥–µ–ª–µ –Ω–µ—Ç –≤—Ç–æ—Ä–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤',
    '–ì–ª–æ–±–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª',
    '–î–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–∑–¥–µ–ª',
    '–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å —Ä–∞–∑–¥–µ–ª–∞ –ø–æ–¥ —Å–æ–º–Ω–µ–Ω–∏–µ–º',
    '–ù–µ—É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫',
    '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑–¥–µ–ª–∞ –ø–æ–¥ —Å–æ–º–Ω–µ–Ω–∏–µ–º',
    '–ù–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ',
    '–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª',
    '–û–ø–µ—á–∞—Ç–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ',
    '–û—Ä–∏—Å—Å –≤ —Ä–∞–∑–¥–µ–ª–µ',
    '–û—Ä–∏—Å—Å–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–µ–π',
    '–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ä–∞–∑–¥–µ–ª',
    '–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞–∑–¥–µ–ª',
    '–ü–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª—ã',
    '–ü—É—Å—Ç–æ–π —Ä–∞–∑–¥–µ–ª',
    '–†–∞–∑–¥–µ–ª–∏—Ç—å —Ä–∞–∑–¥–µ–ª',
    '–†–∞–∑–¥–µ–ª, —Ç—Ä–µ–±—É—é—â–∏–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤',
    '–°–æ–∫—Ä–∞—Ç–∏—Ç—å —Ä–∞–∑–¥–µ–ª',
    '–°–ø–∏—Å–æ–∫ —Ñ–∞–∫—Ç–æ–≤',
    '–°—Ç–∏–ª—å —Ä–∞–∑–¥–µ–ª–∞',
    '–ß–∏—Å—Ç–∏—Ç—å —Ä–∞–∑–¥–µ–ª',
]

# –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —à–∞–±–ª–æ–Ω–∞ Rq –∏ –Ω–∞–∑–≤–∞–Ω–∏–π —à–∞–±–ª–æ–Ω–æ–≤
RQ_PARAM_TEMPLATES = {
    "birth": "–Ω–µ—Ç –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è",
    "birthplace": "–Ω–µ—Ç –º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è",
    "burialplace": "–Ω–µ—Ç –º–µ—Å—Ç–∞ –∑–∞—Ö–æ—Ä–æ–Ω–µ–Ω–∏—è",
    "cat": "–Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
    "check": "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–∫—Ç—ã",
    "checktranslate": "–ø–ª–æ—Ö–æ–π –ø–µ—Ä–µ–≤–æ–¥",
    "cleanup": "–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å",
    "coord": "–Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç",
    "death": "–Ω–µ—Ç –¥–∞—Ç—ã —Å–º–µ—Ä—Ç–∏",
    "deathplace": "–Ω–µ—Ç –º–µ—Å—Ç–∞ —Å–º–µ—Ä—Ç–∏",
    "descript": "–¥–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–∑–¥–µ–ª",
    "empty": "–¥–æ–ø–∏—Å–∞—Ç—å",
    "global": "–≥–ª–æ–±–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å",
    "grammar": "–æ–ø–µ—á–∞—Ç–∫–∏",
    "img": "–Ω–µ—Ç –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏",
    "infobox": "–Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏",
    "isbn": "–æ—Ñ–æ—Ä–º–∏—Ç—å –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—É",
    "linkless": "–∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è",
    "neutral": "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—å",
    "nolead": "–Ω–µ—Ç –ø—Ä–µ–∞–º–±—É–ª—ã",
    "notability": "–∑–Ω–∞—á–∏–º–æ—Å—Ç—å",
    "overlinked": "–º–Ω–æ–≥–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫",
    "part": "–Ω–µ—Ç —Ä–∞–∑–¥–µ–ª–æ–≤",
    "patronymic": "–æ—Ç—á–µ—Å—Ç–≤–æ",
    "pronun": "–Ω—É–∂–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è",
    "recat": "—É—Ç–æ—á–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
    "refless": "–Ω–µ—Ç —Å–Ω–æ—Å–æ–∫",
    "renew": "–æ–±–Ω–æ–≤–∏—Ç—å",
    "shortlead": "–∫–æ—Ä–æ—Ç–∫–∞—è –ø—Ä–µ–∞–º–±—É–ª–∞",
    "sources": "–Ω–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤",
    "sources-cleanup": "–ª–∏—à–Ω—è—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
    "stress": "–Ω—É–∂–Ω–æ —É–¥–∞—Ä–µ–Ω–∏–µ",
    "style": "—Å—Ç–∏–ª—å —Å—Ç–∞—Ç—å–∏",
    "taxobox": "–Ω–µ—Ç —Ç–∞–∫—Å–æ–±–æ–∫—Å–∞",
    "tex": "–æ—Ñ–æ—Ä–º–∏—Ç—å —Ñ–æ—Ä–º—É–ª—ã",
    "translate": "–∑–∞–∫–æ–Ω—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥",
    "underlinked": "–º–∞–ª–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫",
    "wikify": "–ø–ª–æ—Ö–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ",
    "yo": "—ë—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å",
    #–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    "dewikify": "–º–Ω–æ–≥–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫",
    "footnotes": "–Ω–µ—Ç —Å–Ω–æ—Å–æ–∫",
    "image": "–Ω–µ—Ç –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏",
    "images": "–Ω–µ—Ç –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏",
    "introduction": "–Ω–µ—Ç –ø—Ä–µ–∞–º–±—É–ª—ã",
    "makeup": "–ø–ª–æ—Ö–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ",
    "pre": "–∫–æ—Ä–æ—Ç–∫–∞—è –ø—Ä–µ–∞–º–±—É–ª–∞",
    "ref": "–Ω–µ—Ç —Å–Ω–æ—Å–æ–∫",
    "source": "–Ω–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤",
    "stub": "–¥–æ–ø–∏—Å–∞—Ç—å",
    "taxbox": "–Ω–µ—Ç —Ç–∞–∫—Å–æ–±–æ–∫—Å–∞",
    "–æ–±–Ω–æ–≤–∏—Ç—å": "–æ–±–Ω–æ–≤–∏—Ç—å",
}

# –°–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —à–∞–±–ª–æ–Ω–∞ Rq, –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç–∞—Ç—å–∏
RQ_SKIP_PARAMS = ["all", "infobox2", "imdb", "fromlang"]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Rq
RQ_STANDALONE_REDIRECT_CACHE: Dict[str, Dict[str, str]] = {}
RQ_STANDALONE_REDIRECT_CACHE_FILE = "rq_standalone_redirects_cache.json"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ topic –≤ —à–∞–±–ª–æ–Ω–µ Rq
RQ_TOPIC_NORMALIZATION_MAP: Dict[str, str] = {
    # –ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π : –≤–∞—Ä–∏–∞–Ω—Ç (–≤—Å–µ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
    'architecture': 'architecture', '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞': 'architecture',
    'art': 'art', '–∏—Å–∫—É—Å—Å—Ç–≤–æ': 'art',
    'astronomy': 'astronomy', '–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è': 'astronomy',
    'automanufacturer': 'automanufacturer', '–∞–≤—Ç–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å': 'automanufacturer',
    'autotech': 'autotech', '–∞–≤—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞': 'autotech',
    'auto': 'auto', '–∞–≤—Ç–æ': 'auto', '–∞–≤—Ç–æ–º–æ–±–∏–ª—å': 'auto',
    'biology': 'biology', '–±–∏–æ–ª–æ–≥–∏—è': 'biology',
    'chemistry': 'chemistry', '—Ö–∏–º–∏—è': 'chemistry',
    'cinema': 'cinema', '–∫–∏–Ω–æ': 'cinema',
    'comics': 'comics', '–∫–æ–º–∏–∫—Å—ã': 'comics',
    'pharmacology': 'pharmacology', 'drug': 'pharmacology', '—Ñ–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—è': 'pharmacology',
    'economics': 'economics', '—ç–∫–æ–Ω–æ–º–∏–∫–∞': 'economics',
    'education': 'education', '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': 'education',
    'entertainment': 'entertainment', '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': 'entertainment',
    'games': 'games', '–∏–≥—Ä—ã': 'games',
    'geography': 'geography', '–≥–µ–æ–≥—Ä–∞—Ñ–∏—è': 'geography',
    'geology': 'geology', '–≥–µ–æ–ª–æ–≥–∏—è': 'geology',
    'history': 'history', '–∏—Å—Ç–æ—Ä–∏—è': 'history',
    'it': 'it', 'comp': 'it', 'computers': 'it', '–∏—Ç': 'it',
    'law': 'law', 'legal': 'law', '–ø—Ä–∞–≤–æ': 'law',
    'linguistics': 'linguistics', '–ª–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∞': 'linguistics',
    'literature': 'literature', '–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞': 'literature',
    'logic': 'logic', '–ª–æ–≥–∏–∫–∞': 'logic',
    'math': 'math', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞': 'math',
    'medicine': 'medicine', '–º–µ–¥–∏—Ü–∏–Ω–∞': 'medicine',
    'music': 'music', '–º—É–∑—ã–∫–∞': 'music',
    'navy': 'navy', '—Ñ–ª–æ—Ç': 'navy',
    'philosophy': 'philosophy', '—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è': 'philosophy',
    'physics': 'physics', '—Ñ–∏–∑–∏–∫–∞': 'physics',
    'politics': 'politics', '–ø–æ–ª–∏—Ç–∏–∫–∞': 'politics',
    'psychiatry': 'psychiatry', '–ø—Å–∏—Ö–∏–∞—Ç—Ä–∏—è': 'psychiatry',
    'psychology': 'psychology', '–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è': 'psychology',
    'religion': 'religion', '—Ä–µ–ª–∏–≥–∏—è': 'religion',
    'sociology': 'sociology', '—Å–æ—Ü–∏–æ–ª–æ–≥–∏—è': 'sociology',
    'sport': 'sport', '—Å–ø–æ—Ä—Ç': 'sport',
    'statistics': 'statistics', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞': 'statistics',
    'technology': 'technology', '—Ç–µ—Ö–Ω–∏–∫–∞': 'technology',
    'telecommunication': 'telecommunication', '—Ç–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏': 'telecommunication',
    'theatre': 'theatre', 'theater': 'theatre', '—Ç–µ–∞—Ç—Ä': 'theatre',
    'transport': 'transport', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç': 'transport',
    'videogames': 'videogames', '–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –∏–≥—Ä—ã': 'videogames',
}

def print_debug(message: str) -> None:
    if CONFIG['debug_output']:
        print(message)

def print_article_header(page: pywikibot.Page, creation_date: datetime, revision_count: int,
                        current_article: int, category_articles: int,
                        current_category: int, total_categories: int,
                        processed_articles: int, total_articles: int) -> None:
    print(f"‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è {page.title()}")
    print(f"    ‚úèÔ∏è –°–æ–∑–¥–∞–Ω–∞: {creation_date.strftime('%Y-%m-%d')}    üìù –í—Å–µ–≥–æ —Ä–µ–≤–∏–∑–∏–π: {revision_count}    üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {current_article}/{category_articles}, –∫–∞—Ç–µ–≥–æ—Ä–∏—è {current_category}/{total_categories}, –≤—Å–µ–≥–æ {processed_articles}/{total_articles}")

def get_revision_info(page: pywikibot.Page) -> Tuple[datetime, int, List[Dict]]:
    print(f"‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–≤–∏–∑–∏–π...")
    revisions = []
    for rev in page.revisions(content=True, reverse=True):
        if not isinstance(rev, dict):
            rev_dict = {
                'revid': rev.revid,
                'timestamp': rev.timestamp,
                'text': rev.text
            }
            revisions.append(rev_dict)
        else:
            revisions.append(rev)
            
    creation_date = revisions[0]['timestamp'] if revisions else datetime.now()
    revision_count = len(revisions)
    return creation_date, revision_count, revisions

def get_normalized_section_name(section_name: str) -> str:
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞, —É–¥–∞–ª—è—è –æ–±—â–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–∏, –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –≤–∏–∫–∏-—Ä–∞–∑–º–µ—Ç–∫—É
    """
    # –£–¥–∞–ª—è–µ–º –≤–∏–∫–∏-—Ä–∞–∑–º–µ—Ç–∫—É
    normalized = section_name.replace("'''", "").replace("''", "")
    normalized = normalized.replace("[[", "").replace("]]", "")
    
    # –£–¥–∞–ª—è–µ–º –æ–±—â–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–ª–æ–≤
    common_variations = ['–∏', '–∏–ª–∏', '–∞ —Ç–∞–∫–∂–µ', '—Ç–∞–∫–∂–µ']
    normalized = normalized.lower()
    for var in common_variations:
        normalized = normalized.replace(f' {var} ', ' ')
    
    return ' '.join(normalized.split())

def compare_template_names(name1: str, name2: str) -> bool:
    """
    Compares template names similar to MediaWiki link rules:
    - First letter is case-insensitive.
    - The rest of the name is case-sensitive.
    - Spaces and underscores are treated as equivalent and normalized to a single space.
    """
    n1 = ' '.join(name1.replace('_', ' ').split())
    n2 = ' '.join(name2.replace('_', ' ').split())

    if not n1 or not n2:
        return n1 == n2

    if n1[0].lower() != n2[0].lower():
        return False

    if n1[1:] != n2[1:]:
        return False

    return True

def find_sections(wikitext: str) -> List[Tuple[str, int, int]]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã –∏ –∏—Ö –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ä–∞–∑–¥–µ–ª–∞, –Ω–∞—á–∞–ª—å–Ω–∞—è_–ø–æ–∑–∏—Ü–∏—è, –∫–æ–Ω–µ—á–Ω–∞—è_–ø–æ–∑–∏—Ü–∏—è).
    –í–≤–æ–¥–Ω—ã–π —Ä–∞–∑–¥–µ–ª (–¥–æ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞) –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫ "–í–≤–æ–¥–Ω—ã–π —Ä–∞–∑–¥–µ–ª".
    """
    sections = []
    current_pos = 0
    
    # –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–≤–æ–¥–Ω—ã–π —Ä–∞–∑–¥–µ–ª
    first_section_pos = -1
    for level in range(2, 7):
        equals = "=" * level
        section_start = wikitext.find(f"\n{equals}")
        if section_start != -1 and (first_section_pos == -1 or section_start < first_section_pos):
            first_section_pos = section_start
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –¥–æ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –≤–≤–æ–¥–Ω—ã–π —Ä–∞–∑–¥–µ–ª
    if first_section_pos > 0:
        sections.append(("–í–≤–æ–¥–Ω—ã–π —Ä–∞–∑–¥–µ–ª", 0, first_section_pos))
    elif first_section_pos == -1:  # –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–µ—Ç –≤–æ–æ–±—â–µ
        sections.append(("–í–≤–æ–¥–Ω—ã–π —Ä–∞–∑–¥–µ–ª", 0, len(wikitext)))
        return sections
    
    # –¢–µ–ø–µ—Ä—å –Ω–∞–π–¥–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
    while True:
        next_section = -1
        min_level = 99
        pos = -1
        
        for level in range(2, 7):
            equals = "=" * level
            # section_pattern = f"\n[ ]*{equals}[ ]*" # –£–¥–∞–ª–µ–Ω–æ, —Ç.–∫. –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            section_start = wikitext.find("\n", current_pos)
            
            while section_start != -1:
                line_start = section_start + 1
                line_end = wikitext.find("\n", line_start)
                if line_end == -1:
                    line_end = len(wikitext)
                
                line = wikitext[line_start:line_end].strip()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–Ω–∞–∫–æ–≤ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞
                if line.startswith(equals) and line.endswith(equals):
                    if pos == -1 or section_start < pos:
                        pos = section_start
                        next_section = section_start
                        min_level = level
                        break
                
                section_start = wikitext.find("\n", section_start + 1)
        
        if next_section == -1:
            break
            
        section_end = wikitext.find("\n", next_section + 1)
        if section_end == -1:
            section_end = len(wikitext)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –æ—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
        section_text = wikitext[next_section:section_end]
        section_name = section_text.strip("= \n")
        
        next_section_start = -1
        for level in range(2, 7):
            pattern = f"\n[ ]*{'=' * level} "
            pos = wikitext.find("\n", section_end)
            while pos != -1:
                line_start = pos + 1
                line_end = wikitext.find("\n", line_start)
                if line_end == -1:
                    line_end = len(wikitext)
                
                line = wikitext[line_start:line_end].strip()
                if line.startswith('=' * level) and line.endswith('=' * level):
                    if next_section_start == -1 or pos < next_section_start:
                        next_section_start = pos
                        break
                
                pos = wikitext.find("\n", pos + 1)
        
        if next_section_start == -1:
            next_section_start = len(wikitext)
            
        sections.append((section_name, section_end, next_section_start))
        current_pos = section_end
    
    return sections

def get_section_for_template(wikicode: mwparserfromhell.wikicode.Wikicode, 
                           template: mwparserfromhell.nodes.Template,
                           sections: List[Tuple[str, int, int]]) -> List[str]:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫ –∫–∞–∫–∏–º —Ä–∞–∑–¥–µ–ª–∞–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —à–∞–±–ª–æ–Ω.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Ä–∞–∑–¥–µ–ª–æ–≤.
    """
    found_sections = []
    try:
        template_str = str(template)
        full_text = str(wikicode)
        start = 0
        found_positions = []
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ
        while True:
            pos = full_text.find(template_str, start)
            if pos == -1:
                break
            found_positions.append(pos)
            start = pos + len(template_str)  # –ò–∑–º–µ–Ω–µ–Ω–æ: –∏—â–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—É—â–µ–≥–æ
        
        # –î–ª—è –∫–∞–∂–¥–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–¥–µ–ª
        for pos in found_positions:
            for section_name, start_pos, end_pos in sections:
                if start_pos <= pos < end_pos and section_name not in found_sections:
                    found_sections.append(section_name)
        
        if found_positions and not found_sections:
            print_debug(f"      ‚ÑπÔ∏è –®–∞–±–ª–æ–Ω —Å—Ç–∞—Ç—å–∏ –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {found_positions[0]}")
        elif not found_positions:
            print_debug(f"      ‚ö†Ô∏è –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—Å—Ç–µ")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ä–∞–∑–¥–µ–ª–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞: {e}")
    
    return found_sections

def get_section_template_text(sections: List[Tuple[str, int, int]], 
                            wikicode: mwparserfromhell.wikicode.Wikicode,
                            full_text: str,
                            normalized_target: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ –∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ —Å —É—á–µ—Ç–æ–º –≤–∞—Ä–∏–∞—Ü–∏–π –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞"""
    for section_name, start, end in sections:
        if get_normalized_section_name(section_name) == normalized_target:
            section_text = full_text[start:end]
            return section_text
    return None

def normalize_section_name(name: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    # –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
    for char in '¬´¬ª""\'\'[]()‚Äû"':
        name = name.replace(char, '')
    name = name.lower()
    name = ' '.join(name.split())
    return name

def sections_are_similar(name1: str, name2: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–π —Ä–∞–∑–¥–µ–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—è –∞–ª–≥–æ—Ä–∏—Ç–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π.
    –£—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–∞–∏–±–æ–ª—å—à—É—é –æ–±—â—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–æ–≤.
    """
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤–≤–æ–¥–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
    if name1 == "–í–≤–æ–¥–Ω—ã–π —Ä–∞–∑–¥–µ–ª" or name2 == "–í–≤–æ–¥–Ω—ã–π —Ä–∞–∑–¥–µ–ª":
        return name1 == name2
        
    # –§–∏–ª—å—Ç—Ä—É–µ–º —è–≤–Ω–æ –º—É—Å–æ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if any(x in (name1, name2) for x in ('".', '"', ".", "–ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è")):
        return False
        
    name1 = normalize_section_name(name1)
    name2 = normalize_section_name(name2)
    
    # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—É—Å—Ç—ã–µ –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ - –Ω–µ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º
    if not name1 or not name2:
        return False
    
    if name1 == name2:
        return True
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º SequenceMatcher –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫
    similarity = SequenceMatcher(None, name1, name2).ratio()
    
    return len(name1) >= 5 and len(name2) >= 4 and similarity >= 0.70

def get_section_history(page: pywikibot.Page, current_section_name: str) -> List[str]:
    """
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞ –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º —Ä–µ–≤–∏–∑–∏—è–º.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —Ä–∞–∑–¥–µ–ª–∞, –Ω–∞—á–∏–Ω–∞—è —Å —Ç–µ–∫—É—â–µ–≥–æ.
    """
    section_names = [current_section_name]
    
    try:
        for rev in page.revisions(content=True, reverse=True):
            if 'text' not in rev or rev['text'] is None:
                continue
                
            text = rev['text']
            sections = find_sections(text)
            
            # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–π —Ä–∞–∑–¥–µ–ª —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –≤ —ç—Ç–æ–π —Ä–µ–≤–∏–∑–∏–∏
            for section_name, _, _ in sections:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                if section_name in section_names:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–π —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏–∑–≤–µ—Å—Ç–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                if sections_are_similar(section_names[-1], section_name):
                    print_debug(f"    üîÑ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞: ¬´{section_name}¬ª")
                    section_names.append(section_name)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
                    break
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–¥–µ–ª–∞: {e}")
        
    return section_names

def find_first_template_addition_in_section(page: pywikibot.Page, 
                                          section_names: List[str],
                                          template_redirects: Dict[str, Dict[str, str]]) -> Optional[Tuple[str, str, str]]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —à–∞–±–ª–æ–Ω–∞ –≤ –ª—é–±–æ–º –∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —Ä–∞–∑–¥–µ–ª–∞,
    —Å—á–∏—Ç–∞—è –≤—Å–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–¥–Ω–∏–º –∏ —Ç–µ–º –∂–µ —Ä–∞–∑–¥–µ–ª–æ–º.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (–¥–∞—Ç–∞, id_—Ä–µ–≤–∏–∑–∏–∏, –Ω–∞–∑–≤–∞–Ω–∏–µ_—à–∞–±–ª–æ–Ω–∞) –∏–ª–∏ None.
    """
    cutoff_date = datetime(2025, 1, 1)
    normalized_targets = [get_normalized_section_name(name) for name in section_names]
    
    try:
        # –í–º–µ—Å—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –æ—Ç–¥–µ–ª—å–Ω–æ, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ–±—â–µ–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ
        previous_templates = set()
        
        for rev in page.revisions(content=True, reverse=True):
            timestamp = rev['timestamp']
            if timestamp > cutoff_date:
                continue
                
            if 'text' not in rev or rev['text'] is None:
                continue
                
            current_text = rev['text']
            wikicode = mwparserfromhell.parse(current_text)
            sections = find_sections(current_text)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —Ä–∞–∑–¥–µ–ª–∞ –≤ —ç—Ç–æ–π —Ä–µ–≤–∏–∑–∏–∏
            current_templates = set()
            for normalized_target in normalized_targets:
                section_text = get_section_template_text(sections, wikicode, current_text, normalized_target)
                if section_text:
                    for template in mwparserfromhell.parse(section_text).filter_templates():
                        template_name = str(template.name).strip().lower()
                        for templates in template_redirects.values():
                            for redirect_name, main_name in templates.items():
                                if template_name == redirect_name.lower():
                                    current_templates.add((template_name, main_name))
            
            # –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º —à–∞–±–ª–æ–Ω—ã –≤ —ç—Ç–æ–π —Ä–µ–≤–∏–∑–∏–∏, –Ω–æ –Ω–µ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π,
            # —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–≤—ã–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
            if current_templates and not previous_templates:
                template_name, main_name = next(iter(current_templates))
                
                existing_date = None
                for template in wikicode.filter_templates():
                    if str(template.name).strip().lower() == template_name:
                        for param in template.params:
                            param_name = str(param.name).strip().lower()
                            if param_name in ['date', '–¥–∞—Ç–∞']:
                                existing_date = str(param.value).strip()
                                break
                        if existing_date:
                            break
                            
                if existing_date and any(x in existing_date.lower() for x in ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è', '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è']):
                    return (existing_date, str(rev['revid']), main_name)
                else:
                    return (timestamp.strftime("%Y-%m-%d"), str(rev['revid']), main_name)
            
            previous_templates = current_templates
                        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–≤–∏–∑–∏–π: {e}")
        
    return None

def get_input_with_timeout(prompt: str, timeout: int = 5) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º.
    –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –Ω–∞ Windows, —Ç–∞–∫ –∏ –Ω–∞ Unix-—Å–∏—Å—Ç–µ–º–∞—Ö.
    
    Args:
        prompt: –¢–µ–∫—Å—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        timeout: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    Returns:
        str: –í–≤–µ–¥–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç
    """
    print(prompt, end='', flush=True)
    
    if platform.system() == 'Windows':
        import msvcrt
        start_time = time.time()
        input_str = ''
        
        while True:
            if msvcrt.kbhit():
                char = msvcrt.getwche()
                if char == '\r':
                    print()  # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                    break
                input_str += char
            
            if time.time() - start_time > timeout:
                print()  # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                return ''
            
            time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
            
        return input_str
    else:
        import select
        import termios
        import tty
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
        old_settings = termios.tcgetattr(sys.stdin.fileno())
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
            tty.setcbreak(sys.stdin.fileno())
            
            # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥
            start_time = time.time()
            input_str = ''
            while True:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —á—Ç–µ–Ω–∏—è
                if select.select([sys.stdin], [], [], max(0, timeout - (time.time() - start_time)))[0]:
                    char = sys.stdin.read(1)
                    if char == '\n':
                        print()  # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                        break
                    input_str += char
                    print(char, end='', flush=True)
                else:
                    print()  # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                    return ''
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
                if time.time() - start_time > timeout:
                    print()  # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                    return ''
                    
            return input_str
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
            termios.tcsetattr(sys.stdin, termios.TCSADRAIN, old_settings)

def load_rq_redirect_cache_from_json(filename: str) -> Dict[str, Dict[str, str]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—ç—à —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ RQ –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            cache = json.load(f)
            print_debug(f"    üíæ  –ö—ç—à —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ RQ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ {filename}.")
            return cache
    except FileNotFoundError:
        print_debug(f"    ‚ÑπÔ∏è –§–∞–π–ª –∫—ç—à–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ RQ {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π.")
        return {}
    except json.JSONDecodeError:
        print_debug(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –∏–∑ —Ñ–∞–π–ª–∞ {filename}. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫—ç—à.")
        return {}

def save_rq_redirect_cache_to_json(filename: str, cache_data: Dict[str, Dict[str, str]]) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—ç—à —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ RQ –≤ JSON-—Ñ–∞–π–ª."""
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(cache_data, f, ensure_ascii=False, indent=4)
            print_debug(f"    üíæ  –ö—ç—à —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ RQ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}.")
    except IOError:
        print_debug(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—ç—à–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ RQ –≤ —Ñ–∞–π–ª {filename}.")

def get_template_redirects(site: pywikibot.Site, template_name: str, use_rq_specific_cache: bool = False) -> Dict[str, str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞.
    
    Args:
        site (pywikibot.Site): –û–±—ä–µ–∫—Ç —Å–∞–π—Ç–∞ Wikipedia
        template_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
        use_rq_specific_cache (bool): –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è Rq –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    Returns:
        Dict[str, str]: –°–ª–æ–≤–∞—Ä—å {–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ä–µ–¥–∏—Ä–µ–∫—Ç–∞: –æ—Å–Ω–æ–≤–Ω–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ}
    """
    # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –∏ —à–∞–±–ª–æ–Ω —É–∂–µ –≤ –Ω–µ–º –µ—Å—Ç—å
    if use_rq_specific_cache and template_name in RQ_STANDALONE_REDIRECT_CACHE:
        print_debug(f"    ‚ôªÔ∏è  –†–µ–¥–∏—Ä–µ–∫—Ç—ã –¥–ª—è —à–∞–±–ª–æ–Ω–∞ '{template_name}' –≤–∑—è—Ç—ã –∏–∑ RQ –∫—ç—à–∞.")
        return RQ_STANDALONE_REDIRECT_CACHE[template_name]
        
    redirects = {}
    template_page = pywikibot.Page(site, f"–®–∞–±–ª–æ–Ω:{template_name}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–º
        if template_page.isRedirectPage():
            target = template_page.getRedirectTarget()
            main_name = target.title(with_ns=False)
            redirects[template_name] = main_name
            template_page = target
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç, —Ç–æ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π —à–∞–±–ª–æ–Ω
            redirects[template_name] = template_name
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã –Ω–∞ —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω
        for redirect in template_page.redirects():
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "–®–∞–±–ª–æ–Ω:" –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
            redirect_name = redirect.title(with_ns=False)
            redirects[redirect_name] = template_name if not template_page.isRedirectPage() else main_name
            
    except pywikibot.exceptions.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ {template_name}: {e}")
    
    # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if use_rq_specific_cache:
        RQ_STANDALONE_REDIRECT_CACHE[template_name] = redirects
        print_debug(f"    üíæ  –†–µ–¥–∏—Ä–µ–∫—Ç—ã –¥–ª—è —à–∞–±–ª–æ–Ω–∞ '{template_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ RQ –∫—ç—à.")
        save_rq_redirect_cache_to_json(RQ_STANDALONE_REDIRECT_CACHE_FILE, RQ_STANDALONE_REDIRECT_CACHE)
        
    return redirects

def build_template_pattern(template_name: str) -> str:
    """
    –°–æ–∑–¥–∞—ë—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–∞ —Å —É—á—ë—Ç–æ–º –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –Ω–∏–∂–Ω–∏—Ö –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–π –≤ –∏–º–µ–Ω–∏.
    –†–µ–≥–∏—Å—Ç—Ä –Ω–µ –≤–∞–∂–µ–Ω –¥–ª—è –≤—Å–µ—Ö –±—É–∫–≤.
    –¢–∞–∫–∂–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–º–µ–Ω—ã –µ –Ω–∞ —ë –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç.
    """
    name_chars = list(template_name)
    pattern = ''
    for c in name_chars:
        if c == ' ':
            pattern += r'[\s_]+'  # –ü—Ä–æ–±–µ–ª –∏–ª–∏ –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ
        elif c == '_':
            pattern += r'[\s_]+'  # –ü—Ä–æ–±–µ–ª –∏–ª–∏ –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ
        elif c.lower() == '–µ':
            pattern += '[–µ—ë–ï–Å]'
        elif c.lower() == '—ë':
            pattern += '[–µ—ë–ï–Å]'
        else:
            pattern += f'[{c.upper()}{c.lower()}]'
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü —à–∞–±–ª–æ–Ω–∞
    return r'\{\{\s*' + pattern + r'\s*(?:\|[^{}]*?)?\}\}'

def build_template_patterns(template_redirects: Dict[str, str]) -> Dict[str, Tuple[str, str]]:
    """
    –°–æ–∑–¥–∞—ë—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–∞ –∏ –µ–≥–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤.
    """
    patterns = {}
    for redirect_name, main_name in template_redirects.items():
        pattern = build_template_pattern(redirect_name)
        patterns[redirect_name] = (pattern, main_name)
    return patterns

def update_template_with_date_and_name(text: str, found_template: str, main_template: str, iso_date: str, template_position: Optional[int] = None) -> str:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —à–∞–±–ª–æ–Ω –≤ —Ç–µ–∫—Å—Ç–µ, –¥–æ–±–∞–≤–ª—è—è –¥–∞—Ç—É –∏ –∑–∞–º–µ–Ω—è—è —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.
    –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.
    """
    def find_template_end(s: str, start: int) -> int:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–∑–∏—Ü–∏—é –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫ —à–∞–±–ª–æ–Ω–∞ —Å —É—á–µ—Ç–æ–º –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏.
        """
        stack = []
        i = start
        
        while i < len(s):
            if s[i:i+2] == '{{':
                stack.append(i)
                i += 2
                continue
            elif s[i:i+2] == '}}' and stack:
                stack.pop()
                if not stack:  # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏ –Ω–∞—à–µ–≥–æ —à–∞–±–ª–æ–Ω–∞
                    return i
                i += 2
                continue
            i += 1
        return -1

    def process_template(match):
        nonlocal processed_count, processed_positions
        template_start = match.start()
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —à–∞–±–ª–æ–Ω –≤ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
        if template_position is not None and template_start != template_position:
            return match.group(0)
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —à–∞–±–ª–æ–Ω –≤ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
        if template_start in processed_positions:
            return match.group(0)
            
        template_end = find_template_end(text, template_start)
        if template_end == -1:
            return match.group(0)
            
        processed_count += 1
        processed_positions.add(template_start)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞
        template = text[template_start:template_end+2]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–∞—Ç—ã
        if '|–¥–∞—Ç–∞=' in template.lower() or '|date=' in template.lower():
            # –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –µ—Å—Ç—å, —Ç–æ–ª—å–∫–æ –∑–∞–º–µ–Ω—è–µ–º –∏–º—è —à–∞–±–ª–æ–Ω–∞
            template_lines = template.split('|')
            template_name = template_lines[0][2:].strip()  # –£–±–∏—Ä–∞–µ–º {{ –∏ –ø—Ä–æ–±–µ–ª—ã
            is_first_upper = template_name[0].isupper()
            formatted_main_template = main_template if is_first_upper else main_template.lower()
            template_lines[0] = '{{' + formatted_main_template
            return '|'.join(template_lines)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º–∏ —Å–∫–æ–±–∫–∞–º–∏
        template_name = template[2:template.find('|') if '|' in template else -2].strip()
        is_first_upper = template_name[0].isupper()
        formatted_main_template = main_template if is_first_upper else main_template.lower()
        
        if '|' in template:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –ø–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –¥–≤—É–º—è —Å–∫–æ–±–∫–∞–º–∏
            return template[:-2] + f"|–¥–∞—Ç–∞={iso_date}{'}'*2}"
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            return f"{'{{'*2}{formatted_main_template}|–¥–∞—Ç–∞={iso_date}{'}'*2}"

    pattern = build_template_pattern(found_template)
    processed_count = 0
    processed_positions = set()
    
    result = re.sub(pattern, process_template, text, flags=re.IGNORECASE)
    return result

def get_active_subcategories(site: pywikibot.Site, parent_category_name: str) -> List[Tuple[str, int]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ç–∞—Ç–µ–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é.
    
    Returns:
        List[Tuple[str, int]]: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å—Ç–∞—Ç–µ–π)
    """
    active_categories = []
    parent_category = pywikibot.Category(site, parent_category_name)
    
    try:
        for subcategory in parent_category.subcategories():
            article_count = len(list(subcategory.articles()))
            if article_count > 0:
                active_categories.append((subcategory.title(), article_count))
                
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Ç–∞—Ç–µ–π
        active_categories.sort(key=lambda x: x[1])
        
    except pywikibot.exceptions.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è {parent_category_name}: {e}")
    
    return active_categories

def get_templates_from_category(site: pywikibot.Site, category_page: pywikibot.Page) -> Dict[str, Dict[str, str]]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∏—Ö —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã.
    """
    templates = {}
    
    pattern = r'\{\{–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∫ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ\|([^}]+)\}\}'
    matches = re.finditer(pattern, category_page.text, re.IGNORECASE)
    
    for match in matches:
        params = match.group(1).split('|')
        for param in params:
            if '=' not in param:
                template_name = param.strip()
                if template_name:
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã –¥–ª—è —à–∞–±–ª–æ–Ω–∞
                    redirects = get_template_redirects(site, template_name)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∞–º —à–∞–±–ª–æ–Ω —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–º
                    template_page = pywikibot.Page(site, f"–®–∞–±–ª–æ–Ω:{template_name}")
                    if template_page.isRedirectPage():
                        target = template_page.getRedirectTarget()
                        main_name = target.title(with_ns=False)
                        # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω - —Ä–µ–¥–∏—Ä–µ–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —à–∞–±–ª–æ–Ω –∫–∞–∫ –∫–ª—é—á
                        if main_name not in templates:
                            templates[main_name] = {}
                        templates[main_name].update(redirects)
                    else:
                        # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∏ –µ–≥–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã
                        if template_name not in templates:
                            templates[template_name] = {}
                        templates[template_name].update(redirects)
                        templates[template_name][template_name] = template_name
    
    return templates

def get_templates_by_categories(site: pywikibot.Site, category_names: List[str]) -> Dict[str, Dict[str, Dict[str, str]]]:
    templates_by_category = {}
    total_categories = len(category_names)
    print("\nüîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
    
    for i, category_name in enumerate(category_names, 1):
        print(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è {i}/{total_categories}: {category_name}")
        try:
            category = pywikibot.Page(site, category_name)
            if not category.exists():
                print("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                continue
            templates = get_templates_from_category(site, category)
            if templates:
                templates_by_category[category_name] = templates
                for template, redirects in templates.items():
                    template_cap = template[0].upper() + template[1:]
                    redirect_list = [r[0].upper() + r[1:] for r in redirects if r != template]
                    print(f"üîµ ¬´{template_cap}¬ª")
                    if redirect_list:
                        print(f"       ‚Ü™Ô∏è {', '.join(redirect_list)}")
            else:
                print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã —à–∞–±–ª–æ–Ω—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        except pywikibot.exceptions.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print("-" * 40)
    return templates_by_category

def cache_template_info(template_redirects: Dict[str, Dict[str, str]]) -> Dict[str, Dict[str, str]]:
    """
    –ö—ç—à–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–±–ª–æ–Ω–∞—Ö –∏ –∏—Ö —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞—Ö –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.
    
    Returns:
        Dict[str, Dict[str, str]]: {
            'normalized_variants': {–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ_–∏–º—è: –æ—Å–Ω–æ–≤–Ω–æ–µ_–∏–º—è},
            'original_names': {–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ_–∏–º—è: –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ_–∏–º—è},
            'all_variants': {–≤–∞—Ä–∏–∞–Ω—Ç_–∏–º–µ–Ω–∏: (–æ—Å–Ω–æ–≤–Ω–æ–µ_–∏–º—è, –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ_–∏–º—è)}
        }
    """
    template_info = {
        'normalized_variants': {},  # –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ -> –æ—Å–Ω–æ–≤–Ω–æ–µ_–∏–º—è
        'original_names': {},       # –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ -> –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ_–∏–º—è
        'all_variants': {}          # –ª—é–±–æ–π –≤–∞—Ä–∏–∞–Ω—Ç -> (–æ—Å–Ω–æ–≤–Ω–æ–µ_–∏–º—è, –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ_–∏–º—è)
    }
    
    for templates in template_redirects.values():
        for redirect_name, main_name in templates.items():
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ
            original_name = redirect_name
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è (–Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä, –ø—Ä–æ–±–µ–ª—ã)
            normalized = normalize_template_name(redirect_name)
            template_info['normalized_variants'][normalized] = main_name
            template_info['original_names'][normalized] = original_name
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è
            variants = {
                redirect_name,                    # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ
                redirect_name.lower(),            # –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
                redirect_name.replace(' ', '_'),  # —Å –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏
                redirect_name.lower().replace(' ', '_'),  # –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä —Å –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏
                redirect_name.replace('_', ' '),  # —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
                redirect_name.lower().replace('_', ' ')   # –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
            }
            
            for variant in variants:
                template_info['all_variants'][variant] = (main_name, original_name)
    
    return template_info

def clean_section_name(name: str) -> str:
    """–û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤"""
    for char in '¬´¬ª""\'\'[]()':
        name = name.replace(char, '')
    name = name.lower()
    name = ' '.join(name.split())
    return name

def get_section_content(text: str, section_name: str, sections: List[Tuple[str, int, int]]) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–∞–∑–¥–µ–ª–∞ –ø–æ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    clean_target = clean_section_name(section_name)
    for name, start, end in sections:
        if clean_section_name(name) == clean_target:
            return text[start:end]
    return None

def normalize_template_name(name: str) -> str:
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:
    - –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    - –∑–∞–º–µ–Ω—è–µ—Ç –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
    - —É–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    """
    name = name.lower()
    name = name.replace('_', ' ')
    name = ' '.join(name.split())
    return name

def has_section_parameter(template: mwparserfromhell.nodes.Template) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∞—Ç –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∞–±–ª–æ–Ω–∞ —Å–ª–æ–≤–æ "—Ä–∞–∑–¥–µ–ª".
    
    Args:
        template: –û–±—ä–µ–∫—Ç —à–∞–±–ª–æ–Ω–∞
    
    Returns:
        bool: True, –µ—Å–ª–∏ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö —à–∞–±–ª–æ–Ω–∞ –µ—Å—Ç—å —Å–ª–æ–≤–æ "—Ä–∞–∑–¥–µ–ª"
    """
    for param in template.params:
        param_name = str(param.name).strip().lower()
        param_value = str(param.value).strip().lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–º–µ–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ "—Ä–∞–∑–¥–µ–ª" –∏–ª–∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç—Ç–æ —Å–ª–æ–≤–æ
        if "—Ä–∞–∑–¥–µ–ª" in param_name or "—Ä–∞–∑–¥–µ–ª" in param_value:
            return True
    
    return False

def check_templates_in_revision(rev: Dict, templates_to_find: List[Tuple[str, Optional[str], Dict[str, str]]]) -> Dict[str, Tuple[datetime, str, Optional[str], str]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ–≤–∏–∑–∏–∏.
    
    Args:
        rev: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–≤–∏–∑–∏–∏ (text, timestamp, revid)
        templates_to_find: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (template_name, section_name, variants)
        
    Returns:
        Dict[str, Tuple[datetime, str, Optional[str], str]]: –°–ª–æ–≤–∞—Ä—å {–∫–ª—é—á_—à–∞–±–ª–æ–Ω–∞: (timestamp, revid, section_name, variant_found)}
    """
    if 'text' not in rev or rev['text'] is None:
        return {}
        
    results = {}
    text = rev['text']
    wikicode = mwparserfromhell.parse(text)
    sections = find_sections(text)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —à–∞–±–ª–æ–Ω
    for template in wikicode.filter_templates():
        template_name = str(template.name).strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω —Å—Ä–µ–¥–∏ –∏—Å–∫–æ–º—ã—Ö
        for t_name, section_name, variants in templates_to_find:
            # t_name –∑–¥–µ—Å—å - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            # section_name - –ª–∏–±–æ –∏–º—è —Ä–∞–∑–¥–µ–ª–∞, –ª–∏–±–æ None
            template_key = f"{t_name}_{section_name}" if section_name is not None else f"{t_name}_None"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏–º–µ–Ω —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
            found_variant_match = None # Store the actual variant that matched
            for variant_in_dict in variants: # variant_in_dict is an alias or main name from the redirects dict
                if compare_template_names(template_name, variant_in_dict):
                    found_variant_match = template_name # Store the name as it appears in the text
                    break

            if found_variant_match:
                if section_name:
                    # –î–ª—è —à–∞–±–ª–æ–Ω–æ–≤ —Ä–∞–∑–¥–µ–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ª–∏ —Ä–∞–∑–¥–µ–ª–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —à–∞–±–ª–æ–Ω
                    template_sections = get_section_for_template(wikicode, template, sections)
                    for found_section in template_sections:
                        if sections_are_similar(found_section, section_name):
                            results[template_key] = (rev['timestamp'], str(rev['revid']), found_section, found_variant_match)
                            break
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ —à–∞–±–ª–æ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä "—Ä–∞–∑–¥–µ–ª"
                    has_section_param_flag = has_section_parameter(template) # Renamed to avoid conflict
                    
                    if has_section_param_flag:
                        # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä "—Ä–∞–∑–¥–µ–ª", –∏—â–µ–º —Ä–∞–∑–¥–µ–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è
                        template_sections = get_section_for_template(wikicode, template, sections)
                        if template_sections:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª
                            found_section = template_sections[0]
                            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º —Ä–∞–∑–¥–µ–ª–æ–º
                            # section_key = f"{t_name}_{normalize_template_name(found_section)}"
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π t_name –∏ found_section –¥–ª—è –∫–ª—é—á–∞, 
                            # —Ç.–∫. section_name –≤ templates_to_find —É–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω –∏–ª–∏ None.
                            # –ï—Å–ª–∏ has_section_param_flag, —Ç–æ section_name –¥–ª—è —ç—Ç–æ–≥–æ t_name –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –±—ã–ª None.
                            # –ú—ã —Å–æ–∑–¥–∞–µ–º –ù–û–í–£–Æ –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ —à–∞–±–ª–æ–Ω–∞, –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –í –ö–û–ù–ö–†–ï–¢–ù–û–ú —Ä–∞–∑–¥–µ–ª–µ.
                            section_key = f"{t_name}_{found_section}" 
                            results[section_key] = (rev['timestamp'], str(rev['revid']), found_section, found_variant_match)
                    else:
                        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ (section_name is None –≤ templates_to_find)
                        # template_key —É–∂–µ –±—É–¥–µ—Ç t_name_None
                        results[template_key] = (rev['timestamp'], str(rev['revid']), None, found_variant_match)
    
    return results

def find_template_and_section_history(page: pywikibot.Page, revisions: List[Dict], sections_to_track: Set[str], 
                                    templates_to_find: List[Tuple[str, Optional[str], Dict[str, str]]], 
                                    template_info: Dict[str, Dict[str, str]]) -> Tuple[Dict[str, List[str]], Dict[str, Tuple[datetime, str, str]]]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π —Ä–∞–∑–¥–µ–ª–æ–≤ –∏ –¥–∞—Ç—ã –ø–µ—Ä–≤–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤.
    
    Args:
        page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç—å–∏
        revisions: –°–ø–∏—Å–æ–∫ —Ä–µ–≤–∏–∑–∏–π
        sections_to_track: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        templates_to_find: –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–∏–º—è_—à–∞–±–ª–æ–Ω–∞, –∏–º—è_—Ä–∞–∑–¥–µ–ª–∞, —Å–ª–æ–≤–∞—Ä—å_—Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤)
        template_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∞–±–ª–æ–Ω–∞—Ö
        
    Returns:
        –ö–æ—Ä—Ç–µ–∂ (section_history, template_results)
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞
    search_mode = CONFIG['search_mode']
    return find_first_appearance(
        page=page,
        revisions=revisions,
        search_mode=search_mode,
        template_search=True,
        templates_to_find=templates_to_find,
        sections_to_track=sections_to_track,
        template_info=template_info
    )

def get_template_addition_dates(page: pywikibot.Page, template_redirects: Dict[str, Dict[str, str]], search_mode: int, revisions: List[Dict] = None) -> Tuple[List[Tuple[str, str, str, str, str, Optional[str], str]], Dict[str, List[str]], Dict[str, Dict[str, str]]]: # Added 7th element to tuple
    try:
        if revisions is None:
            creation_date, revision_count, revisions = get_revision_info(page)
        
        print("\nüîç –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ —Å—Ç–∞—Ç—å–∏...")
        current_text = page.text
        wikicode = mwparserfromhell.parse(current_text)
        current_sections = find_sections(current_text)
        template_info = cache_template_info(template_redirects)
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —à–∞–±–ª–æ–Ω–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º "—Ä–∞–∑–¥–µ–ª"
        templates_with_section_param = {}
        for template in wikicode.filter_templates():
            if has_section_parameter(template):
                template_name = str(template.name).strip()
                templates_with_section_param[normalize_template_name(template_name)] = True
        
        print_debug("    üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã —à–∞–±–ª–æ–Ω–æ–≤:")
        for main_name, redirects in template_redirects.items():
            print_debug(f"        ‚Ä¢ {main_name}: {', '.join(redirects.keys())}")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
        template_counts = {}  # {main_name_lower: [(template_name, main_name, sections)]}
        
        # –ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ –∏ –ø–æ–¥—Å—á–µ—Ç –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        print("üîç –ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ –∏ –ø–æ–¥—Å—á–µ—Ç –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:") 

        for template in wikicode.filter_templates():
            template_name = str(template.name).strip()
            
            # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –≤ –∫–ª—é—á–∞—Ö all_variants
            found_match = None
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            for variant_key, variant_value in template_info['all_variants'].items():
                 if compare_template_names(template_name, variant_key):
                    found_match = variant_value # (main_name, original_name)
                    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä—è–º–æ–π print –Ω–∞ print_debug
                    print_debug(f"        >>> –ù–ê–ô–î–ï–ù —á–µ—Ä–µ–∑ compare_template_names! ('{template_name}' -> '{variant_key}' -> {found_match}) <<<") 
                    break # –ù–∞—à–ª–∏ –ø–µ—Ä–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –≤—ã—Ö–æ–¥–∏–º

            if found_match:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                main_name, original_name = found_match 
                # main_name_lower –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–∞, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω –≥–¥–µ-—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
                main_name_lower = normalize_template_name(main_name) 
                sections = get_section_for_template(wikicode, template, current_sections)

                # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–±–ª–æ–Ω–µ
                if main_name_lower not in template_counts:
                    template_counts[main_name_lower] = []
                template_counts[main_name_lower].append((original_name, main_name, sections))
            else:
                 # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ print_debug –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                 pass # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–±–ª–æ–Ω, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
        
        if not template_counts:
            print("    ‚ÑπÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã —à–∞–±–ª–æ–Ω—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return [], {}, {}
            
        print("üîç –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–æ–∏—Å–∫—É –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–≤–∏–∑–∏–π:")
        section_templates = []
        regular_templates = []
        found_templates = set()
        found_templates_in_sections = {}
        sections_to_track = set()
        need_section_history = False
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —à–∞–±–ª–æ–Ω
        for main_name_lower, occurrences in template_counts.items():
            template_name, main_name, sections = occurrences[0]
            template_cap = main_name[0].upper() + main_name[1:]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —à–∞–±–ª–æ–Ω —à–∞–±–ª–æ–Ω–æ–º —Ä–∞–∑–¥–µ–ª–∞
            is_section = main_name in SECTION_TEMPLATES or normalize_template_name(template_name) in templates_with_section_param
            
            # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω (–≤–∫–ª—é—á–∞—è —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã) –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞ –∏–ª–∏ –æ–Ω —à–∞–±–ª–æ–Ω —Ä–∞–∑–¥–µ–ª–∞
            if len(occurrences) > 1 or is_section:
                need_section_history = True  # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –Ω—É–∂–µ–Ω –ø–æ–∏—Å–∫ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–¥–µ–ª–æ–≤
                print(f"    üîµ ¬´{template_cap}¬ª (–Ω–∞–π–¥–µ–Ω {len(occurrences)} —Ä–∞–∑)")
                if is_section and not (main_name in SECTION_TEMPLATES):
                    print(f"        üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ —à–∞–±–ª–æ–Ω —Ä–∞–∑–¥–µ–ª–æ–≤ (–Ω–∞–π–¥–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä '—Ä–∞–∑–¥–µ–ª')")
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ SECTION_TEMPLATES –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    SECTION_TEMPLATES.append(main_name)
                else:
                    print(f"        üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ —à–∞–±–ª–æ–Ω —Ä–∞–∑–¥–µ–ª–æ–≤")
                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã, –≥–¥–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —à–∞–±–ª–æ–Ω –∏–ª–∏ –µ–≥–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã
                sections_found = []
                for template_name, _, template_sections in occurrences:
                    for section_name in template_sections:
                        section_key = f"{normalize_template_name(template_name)}_{normalize_template_name(section_name)}"
                        if section_key not in found_templates_in_sections:
                            found_templates_in_sections[section_key] = True
                            sections_to_track.add(section_name)
                            section_templates.append((template_name, main_name, section_name))
                            sections_found.append(section_name)
                print(f"        –ù–∞–π–¥–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª–∞—Ö: {', '.join(f'¬´{s}¬ª' for s in sections_found)}")
            else:
                # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –∏ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ SECTION_TEMPLATES
                if main_name_lower not in found_templates:
                    print(f"    üîµ ¬´{template_cap}¬ª (–Ω–∞–π–¥–µ–Ω 1 —Ä–∞–∑)")
                    print(f"        üìÉ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ —à–∞–±–ª–æ–Ω —Å—Ç–∞—Ç—å–∏")
                    regular_templates.append((template_name, main_name))
                    found_templates.add(main_name_lower)

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
        templates_to_find = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω—ã —Ä–∞–∑–¥–µ–ª–æ–≤
        for template_name, main_name, section_name in section_templates:
            template_variants = set()
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏–∑ template_info
            for variant, (variant_main, _) in template_info['all_variants'].items():
                if variant_main.lower() == main_name.lower():
                    template_variants.add(variant)
            templates_to_find.append((normalize_template_name(template_name), section_name, template_variants))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
        for template_name, main_name in regular_templates:
            template_variants = set()
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏–∑ template_info
            for variant, (variant_main, _) in template_info['all_variants'].items():
                if variant_main.lower() == main_name.lower():
                    template_variants.add(variant)
            templates_to_find.append((normalize_template_name(template_name), None, template_variants))
        
        print("\nüîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–≤–∏–∑–∏–π...")
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–¥–µ–ª–æ–≤ –∏ –¥–∞—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –∑–∞ –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥
        section_history = {}
        if need_section_history:
            section_history, template_dates_dict = find_template_and_section_history(
                page, revisions, sections_to_track, templates_to_find, template_info['normalized_variants']
            )
        else:
            _, template_dates_dict = find_template_and_section_history(
                page, revisions, set(), templates_to_find, template_info['normalized_variants']
            )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        template_dates = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º —à–∞–±–ª–æ–Ω–∞–º –¥–ª—è –≤—ã–≤–æ–¥–∞
        results_by_main = {}
        
        print_debug(f"    DEBUG: template_dates_dict keys: {list(template_dates_dict.keys())}") # ADDED

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        for template_name, section_name, _ in templates_to_find: # template_name is normalized main name
            key = f"{template_name}_{section_name}" if section_name else f"{template_name}_None" # CORRECTED KEY NAME from key_from_templates_to_find
            print_debug(f"    DEBUG: Checking key: '{key}'") # ADDED

            if key in template_dates_dict:
                timestamp, revid, section_name_at_addition, variant_found = template_dates_dict[key] # Unpack variant_found
                iso_date = timestamp.strftime("%Y-%m-%d")
                # main_name = template_info['normalized_variants'][template_name] # This was for old template_info structure
                # Find the main_name corresponding to the normalized template_name from the original template_redirects
                # This is a bit convoluted; template_redirects is Dict[main_name, Dict[redirect, main_name]]
                # We need to find which main_name in template_redirects.keys() normalizes to template_name
                actual_main_name = ""
                original_redirect_name_for_trigger = variant_found # This is the name as it appeared in text
                
                # Determine the ultimate main_name for the found variant
                # The variant_found is the name as it appeared in the text.
                # We need to map this variant_found back to its ultimate main_name via template_info['all_variants']
                if variant_found in template_info['all_variants']:
                    actual_main_name, _ = template_info['all_variants'][variant_found]
                elif normalize_template_name(variant_found) in template_info['normalized_variants']:
                    # Fallback if variant_found itself is not in all_variants (e.g. different case not covered)
                    actual_main_name = template_info['normalized_variants'][normalize_template_name(variant_found)]
                else: # Should not happen if template_info is comprehensive
                    actual_main_name = template_name # Fallback to normalized name
                    
                print_debug(f"    DEBUG: Found key '{key}'. Timestamp: {timestamp}, ReVID: {revid}, Variant: '{variant_found}', MainName: '{actual_main_name}', SectionAtAddition: {section_name_at_addition}") # ADDED
                
                # template_dates.append((iso_date, iso_date, revid, template_name, main_name, section_name_at_addition))
                template_dates.append((iso_date, iso_date, revid, original_redirect_name_for_trigger, actual_main_name, section_name_at_addition, variant_found))
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if actual_main_name not in results_by_main:
                    results_by_main[actual_main_name] = {'sections': [], 'regular': None, 'variants_found': set()}
                
                results_by_main[actual_main_name]['variants_found'].add(variant_found)
                if section_name_at_addition:
                    results_by_main[actual_main_name]['sections'].append((section_name_at_addition, iso_date, revid, variant_found))
                else:
                    results_by_main[actual_main_name]['regular'] = (iso_date, revid, variant_found)

        # –í—ã–≤–æ–¥–∏–º —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if template_dates:
            print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:")
            for main_name, results in results_by_main.items():
                main_cap = main_name[0].upper() + main_name[1:]
                variants_display = f" (–≤–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(sorted(list(results['variants_found'])))})" if len(results['variants_found']) > 1 else ""
                print(f"    üîµ ¬´{main_cap}¬ª{variants_display}")
                
                if results['regular'] is not None:
                    iso_date, revid, variant_found_reg = results['regular']
                    trigger_info = f" (–∫–∞–∫ ¬´{variant_found_reg}¬ª)" if variant_found_reg.lower() != main_name.lower() else ""
                    print(f"        –î–æ–±–∞–≤–ª–µ–Ω{trigger_info}: {iso_date} (—Ä–µ–≤–∏–∑–∏—è {revid})")
                
                if results['sections']:
                    if len(results['sections']) > 1:
                        print(f"        –ù–∞–π–¥–µ–Ω –≤ {len(results['sections'])} —Ä–∞–∑–¥–µ–ª–∞—Ö:")
                    else:
                        print(f"        –ù–∞–π–¥–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª–µ:")
                        
                    for section_name, iso_date, revid, variant_found_sect in sorted(results['sections'], key=lambda x: x[1]):
                        history = section_history.get(section_name, [])
                        trigger_info_sect = f" (–∫–∞–∫ ¬´{variant_found_sect}¬ª)" if variant_found_sect.lower() != main_name.lower() else ""
                        if history:
                            print(f"            ‚Ä¢ ¬´{section_name}¬ª ({' ‚Üí '.join(history)}){trigger_info_sect}: {iso_date} (—Ä–µ–≤–∏–∑–∏—è {revid})")
                        else:
                            print(f"            ‚Ä¢ ¬´{section_name}¬ª{trigger_info_sect}: {iso_date} (—Ä–µ–≤–∏–∑–∏—è {revid})")

            template_dates.sort(key=lambda x: x[0])
            print(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(template_dates)} —à–∞–±–ª–æ–Ω(–æ–≤)")
            return template_dates, section_history, template_info
        else:
            print_debug(f"    DEBUG: template_dates list is empty. template_dates_dict was: {template_dates_dict}") # ADDED
            print("    ‚ÑπÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã —à–∞–±–ª–æ–Ω—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return [], {}, {}
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return [], {}, {}

def process_template_update(page: pywikibot.Page, template_dates: List[Tuple[str, str, str, str, str, Optional[str], str]], section_names: List[Optional[str]], section_history: Dict[str, List[str]], template_info: Dict[str, Dict[str, str]]) -> Tuple[str, str]:
    current_text = page.text
    changes_made = False
    template_changes = []
    processed_positions = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    
    print("üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è:")
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤ —Å –∏—Ö –¥–∞—Ç–∞–º–∏
    section_to_date = {}
    section_to_revid = {}
    section_to_original = {}
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ template_dates
    for template_date, section_name in zip(template_dates, section_names):
        iso_date, _, revid, found_template, main_template, original_section_name, variant_found = template_date
        if section_name:
            section_to_date[section_name] = iso_date
            section_to_revid[section_name] = revid
            section_to_original[section_name] = original_section_name
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü —à–∞–±–ª–æ–Ω–∞
    def find_template_boundaries(text: str, start_pos: int) -> Tuple[int, int, bool]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç —Ç–æ—á–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã —à–∞–±–ª–æ–Ω–∞ —Å —É—á–µ—Ç–æ–º –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏.
        
        Args:
            text (str): –¢–µ–∫—Å—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –∏—â–µ–º —à–∞–±–ª–æ–Ω
            start_pos (int): –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏ —à–∞–±–ª–æ–Ω–∞ {{
            
        Returns:
            Tuple[int, int, bool]: (–Ω–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è, –∫–æ–Ω–µ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è, —É—Å–ø–µ—Ö)
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å {{
        if text[start_pos:start_pos+2] != '{{':
            return start_pos, start_pos, False
            
        stack = []
        pos = start_pos
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —à–∞–±–ª–æ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        line_start = text.rfind('\n', 0, start_pos)
        if line_start == -1:
            line_start = 0
        else:
            line_start += 1  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–º–≤–æ–ª –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
            
        line_end = text.find('\n', start_pos)
        if line_end == -1:
            line_end = len(text)
            
        line = text[line_start:line_end]
        # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ (—Å–æ–¥–µ—Ä–∂–∏—Ç = –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if re.match(r'^=+\s.*\s=+$', line.strip()):
            return start_pos, start_pos, False
        
        # –ò—â–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É —Å —É—á–µ—Ç–æ–º –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
        stack.append(start_pos)
        i = start_pos + 2  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ {{
        
        while i < len(text) and stack:
            if i + 1 < len(text) and text[i:i+2] == '{{':
                stack.append(i)
                i += 2
            elif i + 1 < len(text) and text[i:i+2] == '}}':
                stack.pop()
                if not stack:  # –ù–∞—à–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –Ω–∞—à–µ–≥–æ —à–∞–±–ª–æ–Ω–∞
                    return start_pos, i + 1, True
                i += 2
            else:
                i += 1
                
        # –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç –Ω–µ –Ω–∞—à–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏
        return start_pos, start_pos, False
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —à–∞–±–ª–æ–Ω –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
    for template_date, section_name in zip(template_dates, section_names):
        iso_date, _, revid, found_template, main_template, original_section_name, variant_found = template_date
        print_debug(f"      üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–±–ª–æ–Ω–∞: {found_template}")
        print_debug(f"      üìÖ –î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {iso_date}")
        print_debug(f"      üìç –†–∞–∑–¥–µ–ª: {section_name}")
        
        # --- START CHANGE ---
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (—Ä–µ–¥–∏—Ä–µ–∫—Ç—ã + –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–º—è) –¥–ª—è main_template
        relevant_variants = set()
        main_name_lower = normalize_template_name(main_template)
        for variant, (m_name, _) in template_info['all_variants'].items():
            if normalize_template_name(m_name) == main_name_lower:
                relevant_variants.add(variant)
        print_debug(f"      üîç –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è: {list(relevant_variants)}")
        # --- END CHANGE ---

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é mwparserfromhell
        wikicode = mwparserfromhell.parse(current_text)
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ
        for template in wikicode.filter_templates():
            template_name = str(template.name).strip()
            
            # --- START CHANGE ---
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –∏–º—è —à–∞–±–ª–æ–Ω–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å –æ–¥–Ω–∏–º –∏–∑ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            match_found_in_text = False
            for known_variant in relevant_variants:
                if compare_template_names(template_name, known_variant):
                    match_found_in_text = True
                    break
            
            if match_found_in_text:
            # --- END CHANGE ---
                template_str = str(template)
                
                # –ò—â–µ–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ
                pos = 0
                while True:
                    pos = current_text.find(template_str, pos)
                    if pos == -1:
                        break
                        
                    # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    if pos in processed_positions:
                        pos += 1
                        continue
                    
                    # –ù–∞—Ö–æ–¥–∏–º —Ç–æ—á–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã —à–∞–±–ª–æ–Ω–∞
                    start_pos, end_pos, success = find_template_boundaries(current_text, pos)
                    
                    if not success:
                        pos += 1
                        continue
                        
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —à–∞–±–ª–æ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –µ—â–µ —Ä–∞–∑
                    # —á–µ—Ä–µ–∑ –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                    line_start = current_text.rfind('\n', 0, start_pos)
                    if line_start == -1:
                        line_start = 0
                    else:
                        line_start += 1
                        
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É
                    line_end = current_text.find('\n', start_pos)
                    if line_end == -1:
                        line_end = len(current_text)
                        
                    line = current_text[line_start:line_end]
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
                    is_heading = re.match(r'^=+\s', line) and re.search(r'\s=+$', line)
                    
                    if is_heading:
                        print_debug(f"      ‚ö†Ô∏è –®–∞–±–ª–æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: {line}")
                        pos = end_pos
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–¥–µ–ª—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —à–∞–±–ª–æ–Ω
                    sections = find_sections(current_text)
                    template_sections = []
                    
                    for section_title, section_start, section_end in sections:
                        if section_start <= start_pos < section_end:
                            template_sections.append(section_title)
                    
                    print_debug(f"      üìë –†–∞–∑–¥–µ–ª—ã —à–∞–±–ª–æ–Ω–∞: {template_sections}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –¥–∞—Ç—ã –≤ —à–∞–±–ª–æ–Ω–µ
                    has_date = False
                    for param in template.params:
                        param_name = str(param.name).strip().lower()
                        if param_name in ['–¥–∞—Ç–∞', 'date']:
                            has_date = True
                            print_debug(f"      ‚ö†Ô∏è –®–∞–±–ª–æ–Ω —É–∂–µ –∏–º–µ–µ—Ç –¥–∞—Ç—É: {param.value}")
                            break
                            
                    if not has_date:
                        print_debug(f"      ‚úÖ –®–∞–±–ª–æ–Ω –Ω–µ –∏–º–µ–µ—Ç –¥–∞—Ç—ã, –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω")
                        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —à–∞–±–ª–æ–Ω–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞
                        old_template_name = str(template.name).strip()
                        is_first_upper = old_template_name[0].isupper()
                        formatted_main_template = main_template if is_first_upper else main_template[0].lower() + main_template[1:]
                        
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω
                        new_template = mwparserfromhell.nodes.Template(formatted_main_template)
                        
                        # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                        for param in template.params:
                            new_template.add(str(param.name), str(param.value))
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫–æ–º —Ä–∞–∑–¥–µ–ª–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —à–∞–±–ª–æ–Ω
                        current_section = None
                        if template_sections:
                            current_section = template_sections[0]
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–∞—Ç—É –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
                        template_date = iso_date
                        template_revid = revid
                        if current_section and current_section in section_to_date:
                            template_date = section_to_date[current_section]
                            template_revid = section_to_revid[current_section]
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É
                        new_template.add('–¥–∞—Ç–∞', template_date)
                        
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
                        new_template_str = str(new_template)
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É —à–∞–±–ª–æ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ
                        current_template_str = current_text[start_pos:end_pos+1]
                        
                        # –ó–∞–º–µ–Ω—è–µ–º —à–∞–±–ª–æ–Ω –≤ —Ç–µ–∫—Å—Ç–µ
                        # –í–∞–∂–Ω–æ: –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∑–∞–º–µ–Ω—ã
                        current_text = current_text[:start_pos] + new_template_str + current_text[end_pos+1:]
                        
                        processed_positions.add(start_pos)
                        changes_made = True
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
                        original_section = None
                        if current_section and current_section in section_to_original:
                            original_section = section_to_original[current_section]
                        
                        template_changes.append((found_template, main_template, template_date, current_section, template_revid, current_template_str, new_template_str, original_section))
                        
                        # –í—ã–≤–æ–¥–∏–º –∫–∞–∂–¥–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                        if current_section:
                            # –î–ª—è –≤–≤–æ–¥–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                            display_section = "–≤–≤–æ–¥–Ω–æ–π —á–∞—Å—Ç–∏ —Å—Ç–∞—Ç—å–∏" if current_section == "–í–≤–æ–¥–Ω—ã–π —Ä–∞–∑–¥–µ–ª" else f"—Ä–∞–∑–¥–µ–ª–µ ¬´{current_section}¬ª"
                            print(f"    ‚Ä¢ {current_template_str} ‚Üí {new_template_str} –≤ {display_section}")
                        else:
                            print(f"    ‚Ä¢ {current_template_str} ‚Üí {new_template_str}")
                    
                    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ–∏—Å–∫–∞
                    pos = end_pos
    
    if changes_made:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∞–≤–∫–∏
        template_changes_by_main = {}
        for found_template, main_template, iso_date, section_name, revid, old_template_str, _, original_section_name in template_changes:
            if main_template not in template_changes_by_main:
                template_changes_by_main[main_template] = {'sections': [], 'redirects': set(), 'first_date': iso_date, 'first_revid': revid}
            if found_template.lower() != main_template.lower():
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —à–∞–±–ª–æ–Ω–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
                match = re.search(r'\{\{\s*([^|\}]+)', old_template_str)
                if match:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
                    original_template_name = match.group(1).strip()
                    template_changes_by_main[main_template]['redirects'].add(original_template_name)
                else:
                    template_changes_by_main[main_template]['redirects'].add(found_template)
            if section_name:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ —Å–µ–∫—Ü–∏—è
                section_info = (section_name, iso_date, revid, original_section_name)
                if section_info not in template_changes_by_main[main_template]['sections']:
                    template_changes_by_main[main_template]['sections'].append(section_info)
            else:
                # –î–ª—è —à–∞–±–ª–æ–Ω–æ–≤ –≤–Ω–µ —Ä–∞–∑–¥–µ–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∏ revid
                template_changes_by_main[main_template]['first_date'] = iso_date
                template_changes_by_main[main_template]['first_revid'] = revid
        
        summary_parts = []
        for main_template, changes in template_changes_by_main.items():
            # –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
            template_cap = main_template[0].upper() + main_template[1:]
            sections = changes['sections']
            redirects = changes['redirects']
            first_date = changes['first_date']
            first_revid = changes['first_revid']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —à–∞–±–ª–æ–Ω —à–∞–±–ª–æ–Ω–æ–º —Ä–∞–∑–¥–µ–ª–∞
            # –°—á–∏—Ç–∞–µ—Ç—Å—è —à–∞–±–ª–æ–Ω–æ–º —Ä–∞–∑–¥–µ–ª–∞ –µ—Å–ª–∏: 
            # 1. –ï—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ SECTION_TEMPLATES
            # 2. –ò–ª–∏ –µ—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–∞–π–¥–µ–Ω –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö (sections > 1)
            is_section_template = main_template in SECTION_TEMPLATES or len(sections) > 1
            
            if len(sections) > 3:  # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω–æ–≤ –±–æ–ª—å—à–µ —Ç—Ä—ë—Ö
                # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä (revid, date)
                unique_revisions = {(revid, date) for _, date, revid, _ in sections}
                dates_msg = []
                # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ–≤–∏–∑–∏–∏
                for revid, date in list(unique_revisions)[:3]:
                    dates_msg.append(f"[[Special:Diff/{revid}|{date}]]")
                
                if redirects:
                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
                    redirects_lower = {}
                    for r in redirects:
                        r_lower = r.lower()
                        if r_lower not in redirects_lower:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ, –Ω–æ –¥–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π
                            redirects_lower[r_lower] = r[0].upper() + r[1:] if r else r
                    
                    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞–º–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ "–∏"
                    unique_redirects = list(redirects_lower.values())
                    if len(unique_redirects) == 1:
                        redirect_text = f'[[—à:{unique_redirects[0]}]]'
                    else:
                        redirect_text = ' –∏ '.join([f'[[—à:{r}]]' for r in unique_redirects])
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞–º–∏
                    redirect_msg = f"–ó–∞–º–µ–Ω–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ {redirect_text} –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π [[—à:{template_cap}]]"
                    summary_parts.append(f"{redirect_msg} —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –¥–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ {len(sections)} —à–∞–±–ª–æ–Ω–∞—Ö –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö: {', '.join(dates_msg)} –∏ –¥—Ä.")
                else:
                    summary_parts.append(f"–í [[—à:{template_cap}]] –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∞—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ {len(sections)} —à–∞–±–ª–æ–Ω–∞—Ö –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö: {', '.join(dates_msg)} –∏ –¥—Ä.")
            else:  # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω–æ–≤ —Ç—Ä–∏ –∏–ª–∏ –º–µ–Ω—å—à–µ
                if redirects:
                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
                    redirects_lower = {}
                    for r in redirects:
                        r_lower = r.lower()
                        if r_lower not in redirects_lower:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ, –Ω–æ –¥–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π
                            redirects_lower[r_lower] = r[0].upper() + r[1:] if r else r
                    
                    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞–º–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ "–∏"
                    unique_redirects = list(redirects_lower.values())
                    if len(unique_redirects) == 1:
                        redirect_text = f'[[—à:{unique_redirects[0]}]]'
                    else:
                        redirect_text = ' –∏ '.join([f'[[—à:{r}]]' for r in unique_redirects])
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞–º–∏
                    redirect_msg = f"–ó–∞–º–µ–Ω–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ {redirect_text} –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π [[—à:{template_cap}]]"
                    
                    if sections:
                        section_parts = []
                        for section_info in sections:
                            section, date, revid, original_name = section_info
                            # –î–ª—è –≤–≤–æ–¥–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —à–∞–±–ª–æ–Ω —Ä–∞–∑–¥–µ–ª–∞
                            if section == "–í–≤–æ–¥–Ω—ã–π —Ä–∞–∑–¥–µ–ª":
                                if is_section_template:
                                    section_text = "–≤–æ –≤–≤–æ–¥–Ω–æ–π —á–∞—Å—Ç–∏ —Å—Ç–∞—Ç—å–∏"
                                else:
                                    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ —Å—Ç–∞—Ç—å–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª—É—á–∞–π–Ω–æ –≤–æ –≤–≤–µ–¥–µ–Ω–∏–∏, –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª
                                    continue
                            else:
                                section_text = f"–≤ —Ä–∞–∑–¥–µ–ª–µ ¬´{section}¬ª"
                                # –£–±–∏—Ä–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ "—Ä–∞–Ω–µ–µ", –µ—Å–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                                if original_name and original_name != section and not sections_are_similar(original_name, section) and original_name != "–í–≤–æ–¥–Ω—ã–π —Ä–∞–∑–¥–µ–ª":
                                    section_text += f" (—Ä–∞–Ω–µ–µ: {original_name})"
                            
                            section_parts.append(f"{section_text} ([[Special:Diff/{revid}|{date}]])")
                        
                        if section_parts:
                            summary_parts.append(redirect_msg + f" —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –¥–∞—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {', '.join(section_parts)}")
                        else:
                            summary_parts.append(f"{redirect_msg} —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –¥–∞—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏: [[Special:Diff/{first_revid}|{first_date}]]")
                    else:
                        summary_parts.append(f"{redirect_msg} —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –¥–∞—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏: [[Special:Diff/{first_revid}|{first_date}]]")
                else:
                    if sections:
                        section_parts = []
                        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä (revid, date)
                        unique_revisions = {(revid, date) for _, date, revid, _ in sections}
                        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å–µ–∫—Ü–∏–π –ø–æ —Ä–µ–≤–∏–∑–∏—è–º
                        sections_by_revision = {}
                        for section_info in sections:
                            section, date, revid, original_name = section_info
                            if (revid, date) not in sections_by_revision:
                                sections_by_revision[(revid, date)] = []
                            
                            # –î–ª—è –≤–≤–æ–¥–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —à–∞–±–ª–æ–Ω —Ä–∞–∑–¥–µ–ª–∞
                            if section == "–í–≤–æ–¥–Ω—ã–π —Ä–∞–∑–¥–µ–ª":
                                if is_section_template:
                                    section_text = "–≤–æ –≤–≤–æ–¥–Ω–æ–π —á–∞—Å—Ç–∏ —Å—Ç–∞—Ç—å–∏"
                                else:
                                    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ —Å—Ç–∞—Ç—å–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª—É—á–∞–π–Ω–æ –≤–æ –≤–≤–µ–¥–µ–Ω–∏–∏, –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª
                                    continue
                            else:
                                section_text = f"–≤ —Ä–∞–∑–¥–µ–ª–µ ¬´{section}¬ª"
                                # –£–±–∏—Ä–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ "—Ä–∞–Ω–µ–µ", –µ—Å–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                                if original_name and original_name != section and not sections_are_similar(original_name, section) and original_name != "–í–≤–æ–¥–Ω—ã–π —Ä–∞–∑–¥–µ–ª":
                                    section_text += f" (—Ä–∞–Ω–µ–µ: {original_name})"
                            
                            sections_by_revision[(revid, date)].append(section_text)
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∞—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏—è
                        for (revid, date), section_list in sections_by_revision.items():
                            if section_list:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏
                                section_parts.append(f"{', '.join(section_list)} ([[Special:Diff/{revid}|{date}]])")
                        
                        if is_section_template and section_parts:
                            summary_parts.append(f"–í [[—à:{template_cap}]] –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {', '.join(section_parts)}")
                        else:
                            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç
                            summary_parts.append(f"–í [[—à:{template_cap}]] –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: [[Special:Diff/{first_revid}|{first_date}]]")
                    else:
                        summary_parts.append(f"–í [[—à:{template_cap}]] –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: [[Special:Diff/{first_revid}|{first_date}]]")
        
        summary = ". ".join(summary_parts)
        print("üìã –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∞–≤–∫–∏:")
        print(f"    {summary}")
        print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã")
        
        return current_text, summary
    
    print("    ‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    return current_text, ""  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –∏ –ø—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–º–µ—Å—Ç–æ None

def process_article_with_limit(page: pywikibot.Page, templates: Dict[str, Dict[str, str]], 
                              search_mode: int, max_revisions: int, revision_count: int,
                              should_process_rq: bool) -> Tuple[bool, float, List[Tuple[str, str, str, str, str, Optional[str], str]], List[Optional[str]], Optional[Tuple[str, str]], Dict[str, Dict[str, str]]]:
    start_time = time.time()
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≤–∏–∑–∏–π –≤–º–µ—Å—Ç–æ –∑–∞–ø—Ä–æ—Å–∞
        if max_revisions > 0 and revision_count > max_revisions:
            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Å—Ç–∞—Ç—å–∏: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ {max_revisions} —Ä–µ–≤–∏–∑–∏–π (–Ω–∞–π–¥–µ–Ω–æ {revision_count})")
            return False, time.time() - start_time, [], [], None, {}
            
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–≤–∏–∑–∏—è—Ö –æ–¥–∏–Ω —Ä–∞–∑
        creation_date, revision_count, revisions = get_revision_info(page)
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —à–∞–±–ª–æ–Ω Rq
        if should_process_rq:
            print("‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —à–∞–±–ª–æ–Ω–∞ Rq...")
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã —à–∞–±–ª–æ–Ω–∞ Rq
            site = page.site
            rq_templates = get_rq_template_redirects(site)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω Rq
            success, new_text, summary = process_rq_template(page, rq_templates, search_mode, revisions)
            
            if success:
                print("‚úÖ –®–∞–±–ª–æ–Ω Rq —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                return True, time.time() - start_time, [], [], (new_text, summary), {}
            else:
                print("‚ÑπÔ∏è –®–∞–±–ª–æ–Ω Rq –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É")
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –∏ –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–¥–µ–ª–æ–≤
        template_dates, section_history, template_info = get_template_addition_dates(page, templates, search_mode, revisions)
        
        if not template_dates:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç template_info –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏, —Ö–æ—Ç—è –æ–Ω –∏ –ø—É—Å—Ç
            return True, time.time() - start_time, [], [], None, {}
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º–µ–Ω–∞ —Ä–∞–∑–¥–µ–ª–æ–≤
        section_names = [date[5] for date in template_dates]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—è —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–¥–µ–ª–æ–≤
        new_text, summary = process_template_update(page, template_dates, section_names, section_history, template_info)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if summary:  # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∑–Ω–∞—á–∏—Ç –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            return True, time.time() - start_time, template_dates, section_names, (new_text, summary), template_info
        else:
            return True, time.time() - start_time, template_dates, section_names, None, {}
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ç—å–∏: {e}")
        return False, time.time() - start_time, [], [], None, {}

def process_articles(site: pywikibot.Site, category_templates: Dict[str, Dict[str, str]], 
                    search_mode: int, category_counts: Dict[str, int],
                    process_rq_for_this_run: bool):
    total_categories = len(category_templates)
    current_category = 0
    total_articles = sum(category_counts.values())
    processed_articles = 0
    skipped_articles = []
    
    for category_name, templates in category_templates.items():
        current_category += 1
        category_articles = category_counts[category_name]
        current_article = 0
        
        print(f"\nüìÇ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_name} ({current_category}/{total_categories})")
        print("=" * 100)
        
        try:
            category = pywikibot.Category(site, category_name)
            for page in category.articles():
                current_article += 1
                processed_articles += 1

                # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å–µ –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ä–µ–≤–∏–∑–∏–π
                creation_date = page.oldest_revision.timestamp
                revision_count = page.revision_count()
                
                print_article_header(page, creation_date, revision_count,
                                   current_article, category_articles,
                                   current_category, total_categories,
                                   processed_articles, total_articles)

                try:
                    success, elapsed_time, template_dates, section_names, update_info, template_info = process_article_with_limit(
                        page, templates, search_mode, CONFIG['max_revisions'], revision_count, process_rq_for_this_run
                    )
                    
                    if not success and elapsed_time is not None:
                        skipped_articles.append((page.title(), elapsed_time))
                        print("=" * 100)  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é –ø–æ—Å–ª–µ –ø—Ä–æ–ø—É—Å–∫–∞
                        continue
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                    if update_info:
                        new_text, summary = update_info
                        
                        if CONFIG['autosave']:
                            print(f"    üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º: {summary}") # ADDED
                            try:
                                page.text = new_text
                                page.save(summary=summary, minor=True)
                            except Exception as e:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏ ¬´{page.title()}¬ª: {e}")
                        else:
                            print("üìù –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π...")
                            print(f"üîÑ –ë—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º: {summary}")
                            while True:
                                print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
                                print("1 - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")
                                print("2 - –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                                print("3 - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É")
                                print("4 - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç—å–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏")
                                
                                response = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è (1/2/3/4): ").strip()
                                
                                if response == "1":
                                    if not summary:
                                        print("\n‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                                        break
                                    try:
                                        page.text = new_text
                                        page.save(summary=summary, minor=True)
                                        print(f"\n‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç—å–µ ¬´{page.title()}¬ª")
                                    except Exception as e:
                                        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏: {e}")
                                    break
                                elif response == "2":
                                    print("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                                    break
                                elif response == "3":
                                    print("‚úã –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                                    return
                                elif response == "4":
                                    print("\nüìÑ –¢–µ–∫—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç—å–∏:")
                                    print("=" * 100)
                                    print(new_text)
                                    print("=" * 100)
                                    continue
                                else:
                                    print("\n‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1, 2, 3 –∏–ª–∏ 4")
                    
                except pywikibot.exceptions.Error as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ç—å–∏ {page.title()}:")
                    print(f"   {e}")
                
                print("=" * 100)  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    
        except pywikibot.exceptions.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}:")
            print(f"   {e}")
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—å—è–º
    if skipped_articles:
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π:")
        print(f"–í—Å–µ–≥–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ: {len(skipped_articles)}")

def get_section_templates_with_redirects(site: pywikibot.Site) -> Dict[str, Dict[str, str]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤ –∏ –∏—Ö —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {–æ—Å–Ω–æ–≤–Ω–æ–π_—à–∞–±–ª–æ–Ω: {—Ä–µ–¥–∏—Ä–µ–∫—Ç: –æ—Å–Ω–æ–≤–Ω–æ–π_—à–∞–±–ª–æ–Ω}}.
    """
    templates_with_redirects = {}
    
    for template_name in SECTION_TEMPLATES:
        redirects = {}
        template_page = pywikibot.Page(site, f"–®–∞–±–ª–æ–Ω:{template_name}")
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º —à–∞–±–ª–æ–Ω
            redirects[template_name.lower()] = template_name
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã
            for redirect in template_page.redirects():
                redirect_name = redirect.title(with_ns=False)
                redirects[redirect_name.lower()] = template_name
                
            templates_with_redirects[template_name] = redirects
            
            template_cap = template_name[0].upper() + template_name[1:]
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã –¥–ª—è —à–∞–±–ª–æ–Ω–∞ ¬´{template_cap}¬ª:")
            for redirect_name in redirects:
                if redirect_name.lower() != template_name.lower():
                    redirect_cap = redirect_name[0].upper() + redirect_name[1:]
                    print(f"  ‚Ü™Ô∏è ¬´{redirect_cap}¬ª")
                    
        except pywikibot.exceptions.Error as e:
            template_cap = template_name[0].upper() + template_name[1:]
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ ¬´{template_cap}¬ª: {e}")
    
    return templates_with_redirects

def get_rq_template_redirects(site: pywikibot.Site) -> Dict[str, str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã —à–∞–±–ª–æ–Ω–∞ Rq.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {—Ä–µ–¥–∏—Ä–µ–∫—Ç: –Ω–∞–ø–∏—Å–∞–Ω–∏–µ_—Å_—É—á–µ—Ç–æ–º_—Ä–µ–≥–∏—Å—Ç—Ä–∞}
    """
    redirects = {}
    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ Rq –∏ –µ–≥–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
    rq_templates = ["Rq", "Request", "–£–ª—É—á—à–∏—Ç—å —Å—Ç–∞—Ç—å—é", "Multiple issues"]
    
    for template_name in rq_templates:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã
        try:
            template_page = pywikibot.Page(site, f"–®–∞–±–ª–æ–Ω:{template_name}")
            if template_page.exists():
                redirects[template_name.lower()] = template_name
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã
                for redirect in template_page.redirects():
                    redirect_name = redirect.title(with_ns=False)
                    redirects[redirect_name.lower()] = redirect_name
        except pywikibot.exceptions.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ ¬´{template_name}¬ª: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã
        template_name_lower = template_name[0].lower() + template_name[1:]
        try:
            template_page = pywikibot.Page(site, f"–®–∞–±–ª–æ–Ω:{template_name_lower}")
            if template_page.exists():
                redirects[template_name_lower.lower()] = template_name_lower
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã
                for redirect in template_page.redirects():
                    redirect_name = redirect.title(with_ns=False)
                    redirects[redirect_name.lower()] = redirect_name
        except pywikibot.exceptions.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ ¬´{template_name_lower}¬ª: {e}")
    
    print_debug(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã –¥–ª—è —à–∞–±–ª–æ–Ω–∞ Rq:")
    for redirect in redirects.values():
        print_debug(f"  ‚Ü™Ô∏è ¬´{redirect}¬ª")
    
    return redirects

def extract_rq_params(template: mwparserfromhell.nodes.Template) -> Tuple[List[str], Dict[str, str]]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —à–∞–±–ª–æ–Ω–∞ Rq.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂: (—Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–æ–±–ª–µ–º —Å—Ç–∞—Ç—å–∏ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏, —Å–ª–æ–≤–∞—Ä—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤).
    """
    params_for_conversion = []
    all_named_rq_params = {} # –î–ª—è –≤—Å–µ—Ö –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö: 'topic', 'fromlang', '—Ä–∞–∑–¥–µ–ª', –∏ —Ç.–¥.
    
    # –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    for param in template.params:
        param_name_lower = str(param.name).strip().lower()
        param_value = str(param.value).strip() # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if param_name_lower.isdigit(): # –ù–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            value_lower = param_value.lower() # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –ø—Ä–æ–ø—É—Å–∫–∞–µ–º—ã–º
            if value_lower in RQ_SKIP_PARAMS:
                # –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
                print_debug(f"    ‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä '{value_lower}' –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω.")
                continue 
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —à–∞–±–ª–æ–Ω–∞–º
            if value_lower in RQ_PARAM_TEMPLATES:
                params_for_conversion.append(value_lower) # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞—Ç
                print_debug(f"    ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω –Ω–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: '{value_lower}' ‚Üí —à–∞–±–ª–æ–Ω '{RQ_PARAM_TEMPLATES[value_lower]}'")
            else:
                print_debug(f"    ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä Rq '{value_lower}' –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω (–ø—Ä–æ–ø—É—â–µ–Ω).")
        else: # –õ—é–±–æ–π –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            all_named_rq_params[param_name_lower] = param_value
            print_debug(f"    ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: '{param_name_lower}={param_value}'")
            
    return params_for_conversion, all_named_rq_params

def find_rq_param_addition_dates(page: pywikibot.Page, rq_templates: Dict[str, str], 
                                current_params: List[str], search_mode: int, 
                                revisions: List[Dict]) -> Dict[str, Tuple[datetime, str, str]]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –¥–∞—Ç—ã –ø–µ—Ä–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —à–∞–±–ª–æ–Ω–∞ Rq.
    
    Args:
        page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç—å–∏
        rq_templates: –°–ª–æ–≤–∞—Ä—å —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ —à–∞–±–ª–æ–Ω–∞ Rq
        current_params: –°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —à–∞–±–ª–æ–Ω–∞ Rq –≤ —Å—Ç–∞—Ç—å–µ
        search_mode: –†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ (1 - –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ–≤–∏–∑–∏–∏, 2 - –æ—Ç –ø–µ—Ä–≤–æ–π, 3 - –±–∏–Ω–∞—Ä–Ω—ã–π)
        revisions: –°–ø–∏—Å–æ–∫ —Ä–µ–≤–∏–∑–∏–π —Å—Ç–∞—Ç—å–∏
        
    Returns:
        Dict[str, Tuple[datetime, str, str]]: –°–ª–æ–≤–∞—Ä—å {–ø–∞—Ä–∞–º–µ—Ç—Ä: (–¥–∞—Ç–∞, id_—Ä–µ–≤–∏–∑–∏–∏, –∏–º—è_–ø–∞—Ä–∞–º–µ—Ç—Ä–∞_–≤_—Ç–æ–π_—Ä–µ–≤–∏–∑–∏–∏)}
    """
    # –û—á–∏—â–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    valid_params = []
    for param in current_params:
        param = param.strip().lower()
        if param in RQ_PARAM_TEMPLATES:
            valid_params.append(param)
        else:
            print(f"    ‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä '{param}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ª–æ–≤–∞—Ä–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —à–∞–±–ª–æ–Ω–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
    
    if not valid_params:
        print("    ‚ö†Ô∏è –ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞")
        return {}
    
    print(f"    ‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞: {', '.join(valid_params)}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞
    return find_first_appearance(
        page=page,
        revisions=revisions,
        search_mode=search_mode,
        template_search=False,
        rq_templates=rq_templates,
        rq_params=valid_params
    )

def process_rq_template(page: pywikibot.Page, rq_templates: Dict[str, str], search_mode: int, revisions: List[Dict] = None) -> Tuple[bool, str, str]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—å—é —Å —à–∞–±–ª–æ–Ω–æ–º Rq, –∑–∞–º–µ–Ω—è—è –µ–≥–æ –Ω–∞ —à–∞–±–ª–æ–Ω-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏ –ø—Ä–æ–±–ª–µ–º.
    
    Args:
        page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç—å–∏
        rq_templates: –°–ª–æ–≤–∞—Ä—å —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ —à–∞–±–ª–æ–Ω–∞ Rq
        search_mode: –†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –¥–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (1 - –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ–≤–∏–∑–∏–∏, 2 - –æ—Ç –ø–µ—Ä–≤–æ–π)
        revisions: –°–ø–∏—Å–æ–∫ —Ä–µ–≤–∏–∑–∏–π, –µ—Å–ª–∏ —É–∂–µ –ø–æ–ª—É—á–µ–Ω —Ä–∞–Ω–µ–µ
        
    Returns:
        Tuple[bool, str, str]: (—É—Å–ø–µ—Ö, –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç, –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∞–≤–∫–∏)
    """
    try:
        print_debug("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã Rq –≤ —Å—Ç–∞—Ç—å–µ...")
        
        if revisions is None:
            _, _, revisions = get_revision_info(page)
        
        current_text = page.text
        wikicode = mwparserfromhell.parse(current_text)
        site = page.site # Get site object for get_template_redirects
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ Rq –∏ –∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        found_rq_templates = []
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ Rq –¥–ª—è –ø–æ–∏—Å–∫–∞
        normalized_redirects = {name.lower(): name for name, original in rq_templates.items()}
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã Rq –≤ —Å—Ç–∞—Ç—å–µ
        for template in wikicode.filter_templates():
            template_name = str(template.name).strip()
            template_name_lower = template_name.lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —à–∞–±–ª–æ–Ω —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–º Rq
            if template_name_lower in normalized_redirects:
                # --- START CHANGE ---
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –¢–ï–ö–£–©–ò–ô —à–∞–±–ª–æ–Ω –ø—Ä–æ–ø—É—Å–∫–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
                # –ï—Å–ª–∏ –¥–∞, —Ç–æ –≤—Å—é —Å—Ç–∞—Ç—å—é –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –∫–∞–∫ –∏ –±—ã–ª–æ –∑–∞–¥—É–º–∞–Ω–æ.
                current_template_raw_params = [str(p.value).strip().lower() 
                                               for p in template.params if str(p.name).strip().isdigit()]
                contains_skip_param = any(p in RQ_SKIP_PARAMS for p in current_template_raw_params)
                
                if contains_skip_param:
                    print_debug(f"    ‚ö†Ô∏è –¢–µ–∫—É—â–∏–π —à–∞–±–ª–æ–Ω Rq —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–ø—É—Å–∫–∞–µ–º—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä ({[p for p in current_template_raw_params if p in RQ_SKIP_PARAMS]}). –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç–∞—Ç—å–∏.")
                    return False, current_text, ""
                # --- END CHANGE ---

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                extracted_params, special_params = extract_rq_params(template)
                
                # –ï—Å–ª–∏ –Ω–µ—Ç –í–ê–õ–ò–î–ù–´–• –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω Rq
                if not extracted_params:
                    if special_params:
                        print_debug("    ‚ö†Ô∏è –®–∞–±–ª–æ–Ω Rq –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ)")
                    else:
                        print_debug("    ‚ö†Ô∏è –®–∞–±–ª–æ–Ω Rq –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
                    continue # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–±–ª–æ–Ω—É Rq –≤ —Å—Ç–∞—Ç—å–µ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω, –µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                original_name = template_name  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞
                found_rq_templates.append((template, extracted_params, special_params, original_name))
                print_debug(f"    ‚úÖ –ù–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω ¬´{original_name}¬ª —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {', '.join(extracted_params)}")
        
        if not found_rq_templates:
            print_debug("    ‚ÑπÔ∏è –®–∞–±–ª–æ–Ω—ã Rq –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å—Ç–∞—Ç—å–µ (–∏–ª–∏ –≤—Å–µ –ø—Ä–æ–ø—É—â–µ–Ω—ã)")
            return False, current_text, ""
        
        changes_made = False
        processed_rq_details_for_summary = [] # Store details for summary generation
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
        for template, params, special_params, original_name in found_rq_templates:
            # –ù–∞—Ö–æ–¥–∏–º –¥–∞—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            # param_dates_from_rq: Dict[str, Tuple[datetime, str, str (hist_rq_param_name)]]
            param_dates_from_rq = find_rq_param_addition_dates(page, rq_templates, params, search_mode, revisions)
            
            # --- START NEW LOGIC: Find dates for equivalent standalone templates ---
            final_param_dates_with_triggers: Dict[str, Tuple[datetime, str, str, str]] = {}
            
            print_debug("    üîÑ –ü–æ–∏—Å–∫ –¥–∞—Ç –¥–ª—è —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã—Ö —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤...")

            # 1. –°–æ–±—Ä–∞—Ç—å –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã-—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç—ã
            unique_standalone_templates_to_search: Dict[str, str] = {} # {normalized_name: original_name}
            for rq_param_name_for_standalone in params: # params - —ç—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Rq –∏–∑ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç—å–∏
                target_standalone_template_name = RQ_PARAM_TEMPLATES.get(rq_param_name_for_standalone.lower())
                if target_standalone_template_name:
                    normalized_standalone = normalize_template_name(target_standalone_template_name)
                    if normalized_standalone not in unique_standalone_templates_to_search:
                        unique_standalone_templates_to_search[normalized_standalone] = target_standalone_template_name
            
            standalone_template_addition_dates: Dict[str, Tuple[datetime, str, Optional[str], str]] = {}
            if unique_standalone_templates_to_search:
                print_debug(f"        üîç –ë—É–¥—É—Ç –∏—Å–∫–∞—Ç—å—Å—è standalone-—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç—ã: {list(unique_standalone_templates_to_search.values())}")
                
                # 2. –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å templates_to_find –¥–ª—è find_first_appearance
                templates_to_find_for_all_standalones = []
                for norm_name, orig_name in unique_standalone_templates_to_search.items():
                    redirects = get_template_redirects(site, orig_name, use_rq_specific_cache=True)
                    if not redirects: # –î–æ–ª–∂–µ–Ω –≤—Å–µ–≥–¥–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã —Å–µ–±—è
                        redirects = {orig_name: orig_name}
                    templates_to_find_for_all_standalones.append(
                        (norm_name, None, redirects) # section_name is None
                    )
                
                # 3. –û–¥–∏–Ω –≤—ã–∑–æ–≤ find_first_appearance –¥–ª—è –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö standalone —à–∞–±–ª–æ–Ω–æ–≤
                if templates_to_find_for_all_standalones:
                    _, standalone_template_addition_dates = find_first_appearance(
                        page, revisions, search_mode,
                        template_search=True,
                        templates_to_find=templates_to_find_for_all_standalones,
                        sections_to_track=set(), 
                        template_info={} # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –≤—ã–∑–æ–≤–∞ find_first_appearance
                    )
                    print_debug(f"        ‚ÑπÔ∏è  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ standalone (–∫–ª—é—á–∏): {list(standalone_template_addition_dates.keys())}")

            # 4. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞—Ç –∏ –≤—ã–±–æ—Ä –Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞–Ω–Ω–µ–π
            for rq_param_name, (rq_date, rq_revid, hist_rq_param_trigger) in param_dates_from_rq.items():
                current_best_date = rq_date
                current_best_revid = rq_revid
                current_best_trigger_name = hist_rq_param_trigger # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —ç—Ç–æ —Ç—Ä–∏–≥–≥–µ—Ä –∏–∑ Rq
                current_best_trigger_type = 'rq' # –¢–∏–ø —Ç—Ä–∏–≥–≥–µ—Ä–∞: 'rq' –∏–ª–∏ 'standalone'
                
                target_standalone_template_name_orig = RQ_PARAM_TEMPLATES.get(rq_param_name.lower())
                
                if target_standalone_template_name_orig:
                    normalized_target_standalone = normalize_template_name(target_standalone_template_name_orig)
                    # –ö–ª—é—á –¥–ª—è standalone_template_addition_dates –±—É–¥–µ—Ç 'normalizedname_None'
                    standalone_key = f"{normalized_target_standalone}_None"
                    
                    print_debug(f"        üîπ –î–ª—è Rq|{rq_param_name} (—Ü–µ–ª—å: {{ {{{target_standalone_template_name_orig}}} }} ):")
                    print_debug(f"            –î–∞—Ç–∞ –∏–∑ Rq-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ({hist_rq_param_trigger}): {rq_date.strftime('%Y-%m-%d')}")

                    if standalone_key in standalone_template_addition_dates:
                        st_date, st_revid, _, st_variant_found = standalone_template_addition_dates[standalone_key]
                        print_debug(f"            –î–∞—Ç–∞ –∏–∑ standalone —à–∞–±–ª–æ–Ω–∞ ({st_variant_found}): {st_date.strftime('%Y-%m-%d')}")
                        if st_date < current_best_date:
                            print_debug(f"                ‚ùóÔ∏è –ù–∞–π–¥–µ–Ω–∞ –±–æ–ª–µ–µ —Ä–∞–Ω–Ω—è—è –¥–∞—Ç–∞ –æ—Ç standalone —à–∞–±–ª–æ–Ω–∞ ({st_variant_found}).")
                            current_best_date = st_date
                            current_best_revid = st_revid
                            current_best_trigger_name = st_variant_found # –¢–µ–ø–µ—Ä—å —Ç—Ä–∏–≥–≥–µ—Ä - —ç—Ç–æ –∏–º—è standalone —à–∞–±–ª–æ–Ω–∞
                            current_best_trigger_type = 'standalone'
                    else:
                        print_debug(f"            Standalone —à–∞–±–ª–æ–Ω {{ {{{target_standalone_template_name_orig}}} }} –∏–ª–∏ –µ–≥–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏–∏ (–∫–ª—é—á: {standalone_key}).")
                else:
                    print_debug(f"        ‚ö†Ô∏è –î–ª—è Rq|{rq_param_name} –Ω–µ –Ω–∞–π–¥–µ–Ω —Ü–µ–ª–µ–≤–æ–π —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –≤ RQ_PARAM_TEMPLATES.")
                
                final_param_dates_with_triggers[rq_param_name] = (current_best_date, current_best_revid, current_best_trigger_name, current_best_trigger_type)
            # --- END NEW LOGIC ---
            
            if not final_param_dates_with_triggers: # Check if any dates were determined
                print_debug("    ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ standalone)")
                continue
            
            # –í—ã–≤–æ–¥–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print_debug("    üìÖ –ò—Ç–æ–≥–æ–≤—ã–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—Å —É—á–µ—Ç–æ–º standalone):")
            for param, (date, revid, hist_param_or_template, trigger_type_log) in final_param_dates_with_triggers.items(): 
                print_debug(f"       ‚Ä¢ {param} (—Ç—Ä–∏–≥–≥–µ—Ä ¬´{hist_param_or_template}¬ª, —Ç–∏–ø: {trigger_type_log}): {date.strftime('%Y-%m-%d')} (—Ä–µ–≤–∏–∑–∏—è {revid})")
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            is_first_upper = original_name[0].isupper()
            template_name = "Rq" if is_first_upper else "rq"
            
            container_content = f"{{{{{template_name}|}}}}"
            inside_content = []

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —Ü–µ–ª–µ–≤–æ–º—É —à–∞–±–ª–æ–Ω—É –∏ –Ω–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é —Ä–∞–Ω–Ω—é—é –¥–∞—Ç—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
            earliest_target_dates = {}
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º final_param_dates_with_triggers –¥–ª—è —ç—Ç–æ–π –ª–æ–≥–∏–∫–∏
            # –¢–µ–ø–µ—Ä—å –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç 4 —ç–ª–µ–º–µ–Ω—Ç–∞, –≤–∫–ª—é—á–∞—è —Ç–∏–ø —Ç—Ä–∏–≥–≥–µ—Ä–∞, –Ω–æ –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è earliest_target_dates
            for param, (date, revid, hist_param_or_template_trigger, _) in final_param_dates_with_triggers.items(): 
                if param in RQ_PARAM_TEMPLATES:
                    target_template = RQ_PARAM_TEMPLATES[param]
                    if target_template not in earliest_target_dates or date < earliest_target_dates[target_template][0]:
                        earliest_target_dates[target_template] = (date, revid, param, hist_param_or_template_trigger) 
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ü–µ–ª–µ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –ø–æ –∏—Ö —Å–∞–º–æ–π —Ä–∞–Ω–Ω–µ–π –¥–∞—Ç–µ
            sorted_targets = sorted(
                earliest_target_dates.items(), 
                key=lambda item: item[1][0] # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ (–ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä—Ç–µ–∂–∞ –≤ –∑–Ω–∞—á–µ–Ω–∏–∏)
            )
            
            fromlang_wipe_ready = False 

            # –°–æ–∑–¥–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —à–∞–±–ª–æ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–ª–µ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
            for target_template, (date, revid, original_param, hist_param_for_summary) in sorted_targets: # UNPACK hist_param_for_summary
                iso_date = date.strftime("%Y-%m-%d")
                
                template_str_parts = ["{{" + target_template] # Changed to string concatenation
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–µ–ª–µ–≤–æ–π —à–∞–±–ª–æ–Ω "–ø–ª–æ—Ö–æ–π –ø–µ—Ä–µ–≤–æ–¥" 
                # –∏ –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä "fromlang" –≤ —Ç–µ–∫—É—â–µ–º –Ω–∞–±–æ—Ä–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Rq
                if target_template == "–ø–ª–æ—Ö–æ–π –ø–µ—Ä–µ–≤–æ–¥" and "fromlang" in special_params:
                    fromlang_value = special_params["fromlang"]
                    template_str_parts.append(f"|—è–∑—ã–∫={fromlang_value}") 
                    fromlang_wipe_ready = True 
                
                # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–∞—Ç–∞ –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏
                template_str_parts.append(f"|–¥–∞—Ç–∞={iso_date}" + "}}") # Changed to string concatenation
                
                final_template_str = "".join(template_str_parts)
                inside_content.append(final_template_str)
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥, —á—Ç–æ–±—ã –æ–Ω –ø–æ–∫–∞–∑—ã–≤–∞–ª –ø–æ–ª–Ω—ã–π —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
                alias_note = f" (—Ä–∞–Ω–µ–µ ¬´{hist_param_for_summary}¬ª)" if hist_param_for_summary.lower() != original_param.lower() else ""
                print_debug(f"       ‚Ä¢ –î–æ–±–∞–≤–ª—è–µ—Ç—Å—è —à–∞–±–ª–æ–Ω: {final_template_str} (–∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ '{original_param}'{alias_note}, —Ä–µ–≤–∏–∑–∏—è {revid})")
                    
            if not inside_content:
                print_debug("    ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —à–∞–±–ª–æ–Ω—ã")
                continue
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            container_parts = ["{{" + template_name] # –ò–º—è Rq (—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º)
            
            has_added_any_param = False
            
            # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ (–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ) –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if special_params:
                first_special = True
                for name, value in sorted(special_params.items()): 
                    if name == "fromlang" and fromlang_wipe_ready:
                        print_debug(f"    ‚ÑπÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä 'fromlang' (–∑–Ω–∞—á–µ–Ω–∏–µ: '{value}') –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤ —à–∞–±–ª–æ–Ω–µ '–ø–ª–æ—Ö–æ–π –ø–µ—Ä–µ–≤–æ–¥' –∏ –Ω–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —à–∞–±–ª–æ–Ω Rq.")
                        continue 
                    
                    processed_value = value
                    if name == "topic":
                        processed_value = normalize_rq_topic_value(value)
                        if processed_value != value: 
                            print_debug(f"    üîÑ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è topic: '{value}' ‚Üí '{processed_value}'")
                    
                    if first_special:
                        container_parts.append(f"|{name}={processed_value}")
                        first_special = False
                    else:
                        container_parts.append(f"\n|{name}={processed_value}")
                    has_added_any_param = True
            
            # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã (–Ω–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
            if inside_content: # inside_content is guaranteed not to be empty here due to earlier check
                
                # Construct the full string for the single unnamed parameter
                # containing all sub-templates.
                unnamed_parameter_actual_content_parts = []
                # Start first sub-template on a new line for readability within the parameter
                unnamed_parameter_actual_content_parts.append("\n" + inside_content[0])
                for sub_template_str in inside_content[1:]:
                    # Subsequent sub-templates also start on a new line, NO pipe between them
                    unnamed_parameter_actual_content_parts.append("\n" + sub_template_str)
                
                full_unnamed_content_string = "".join(unnamed_parameter_actual_content_parts)

                if not has_added_any_param: # No named params yet, this is the very first parameter in {{rq|...}}
                    container_parts.append("|" + full_unnamed_content_string)
                else: # This unnamed parameter follows named parameters
                    container_parts[-1] += "|" # Append pipe to the last named parameter string
                    container_parts.append(full_unnamed_content_string) # Append the content string itself
                
                has_added_any_param = True
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —à–∞–±–ª–æ–Ω Rq
            if has_added_any_param:
                container_parts.append("\n}}")
            else: # –ï—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ –±—ã–ª–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–ø—É—Å—Ç–æ–π {{rq}})
                container_parts.append("}}")

            container_text = "".join(container_parts)
            
            # --- START NEW LOGIC: Simplify if only one inner template remains (unless topic has value) ---
            final_replacement_text_for_this_rq = container_text
            was_simplified_this_rq = False

            # –£—Å–ª–æ–≤–∏–µ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è: –æ—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–∏–ø –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            # –ò–õ–ò –ø–∞—Ä–∞–º–µ—Ç—Ä 'topic' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ò–õ–ò –ø–∞—Ä–∞–º–µ—Ç—Ä 'topic' –ø—É—Å—Ç–æ–π.
            if len(sorted_targets) == 1:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ 'topic'
                has_non_empty_topic = special_params.get('topic', '').strip()

                if not has_non_empty_topic:
                    # –£–ø—Ä–æ—â–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ
                    single_target_template_name, _ = sorted_targets[0] # –ù–∞–º –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∏–º—è

                    if inside_content: # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–µ—Ä–Ω–æ, –µ—Å–ª–∏ sorted_targets –Ω–µ –ø—É—Å—Ç
                        final_replacement_text_for_this_rq = inside_content[0] # –≠—Ç–æ —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ {{—à–∞–±–ª–æ–Ω|–¥–∞—Ç–∞=...}}
                        was_simplified_this_rq = True
                        print_debug(f"    ‚ÑπÔ∏è –®–∞–±–ª–æ–Ω Rq —Å '{original_name}' –±—É–¥–µ—Ç —É–ø—Ä–æ—â–µ–Ω –¥–æ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ '{single_target_template_name}'.")
            # --- END NEW LOGIC ---

            # –ó–∞–º–µ–Ω—è–µ–º —à–∞–±–ª–æ–Ω –≤ —Ç–µ–∫—Å—Ç–µ
            old_template_str = str(template)
            current_text = current_text.replace(old_template_str, final_replacement_text_for_this_rq)
            changes_made = True
            
            print("    üîÑ –ó–∞–º–µ–Ω–∞ —à–∞–±–ª–æ–Ω–∞:") 
            print(f"    ‚Ä¢ {old_template_str} ‚Üí {final_replacement_text_for_this_rq}")

            processed_rq_details_for_summary.append({
                'original_rq_name_in_text': original_name,
                'was_simplified': was_simplified_this_rq,
                'final_param_dates_with_triggers': final_param_dates_with_triggers,
                'params_from_rq_for_summary': params, 
                'sorted_targets_for_summary': sorted_targets,
                'special_params_for_summary': special_params # Needed if summary logic depends on it
            })
        
        if changes_made:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∞–≤–∫–∏
            summary_parts = []
            
            # for template, params, special_params, original_name in found_rq_templates:
            for rq_detail in processed_rq_details_for_summary:
                original_name = rq_detail['original_rq_name_in_text']
                was_simplified = rq_detail['was_simplified']
                local_final_param_dates = rq_detail['final_param_dates_with_triggers']
                params_for_summary_build = rq_detail['params_from_rq_for_summary']
                sorted_targets_for_summary_build = rq_detail['sorted_targets_for_summary']

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—á–µ–≥–æ —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –∑–¥–µ—Å—å, –Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
                if not was_simplified and not any(p in local_final_param_dates for p in params_for_summary_build):
                    continue

                display_name_rq = "Rq" if original_name[0].isupper() else "rq"

                if was_simplified:
                    if sorted_targets_for_summary_build: # Should be one item
                        single_target_name, (s_date, s_revid, s_original_param, s_hist_trigger) = sorted_targets_for_summary_build[0]
                        
                        # We need to build the 'final_details_in_parentheses' for this single param
                        # The key for local_final_param_dates is s_original_param (e.g., "img")
                        if s_original_param in local_final_param_dates:
                            date_detail, revid_detail, trigger_name_detail, trigger_type_detail = local_final_param_dates[s_original_param]
                            iso_date_detail = date_detail.strftime("%Y-%m-%d")
                            date_with_diff_link_detail = f"[[Special:Diff/{revid_detail}|{iso_date_detail}]]"
                            details_for_summary_text_detail = ""

                            if trigger_type_detail == 'rq':
                                if trigger_name_detail.lower() != s_original_param.lower():
                                    details_for_summary_text_detail = f"—Ä–∞–Ω–µ–µ {trigger_name_detail}, "
                            elif trigger_type_detail == 'standalone':
                                if compare_template_names(trigger_name_detail, single_target_name):
                                    details_for_summary_text_detail = f"—à–∞–±–ª–æ–Ω —É–∂–µ –±—ã–ª –≤ —Å—Ç–∞—Ç—å–µ, "
                                else:
                                    details_for_summary_text_detail = f"—Ä–µ–¥–∏—Ä–µ–∫—Ç [[—à:{trigger_name_detail}]] —É–∂–µ –±—ã–ª –≤ —Å—Ç–∞—Ç—å–µ, "
                            
                            final_details_in_parentheses_simplified = ""
                            if details_for_summary_text_detail:
                                final_details_in_parentheses_simplified = f"({details_for_summary_text_detail}{date_with_diff_link_detail})"
                            else:
                                final_details_in_parentheses_simplified = f"({date_with_diff_link_detail})"
                            
                            # Original param (e.g. "img") part for the summary
                            # summary_param_part = f"{s_original_param} ‚Üí [[—à:{single_target_name}]]"

                            # summary_parts.append(f"–ó–∞–º–µ–Ω–∞ [[—à:{display_name_rq}]] –Ω–∞ {summary_param_part} {final_details_in_parentheses_simplified}")
                            # summary_parts.append(f"–ó–∞–º–µ–Ω–∞ [[—à:{display_name_rq}]] –Ω–∞ [[—à:{single_target_name}]] {final_details_in_parentheses_simplified}")
                            # summary_parts.append(f"–ó–∞–º–µ–Ω–∞ [[—à:{display_name_rq}]] —Å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º {s_original_param} –Ω–∞ [[—à:{single_target_name}]] {final_details_in_parentheses_simplified}")
                            summary_parts.append(f"[[—à:{display_name_rq}]] —É–±—Ä–∞–Ω, —Ç.–∫. –æ—Å—Ç–∞–ª–∞—Å—å –æ–¥–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞: {s_original_param} ‚Üí [[—à:{single_target_name}]] {final_details_in_parentheses_simplified}")
                        else: # Fallback if original param not in local_final_param_dates (should not happen)
                            iso_date_s = s_date.strftime("%Y-%m-%d")
                            date_with_diff_link_s = f"[[Special:Diff/{s_revid}|{iso_date_s}]]"
                            # summary_parts.append(f"–£–ø—Ä–æ—â–µ–Ω–∏–µ [[—à:{display_name_rq}]] –¥–æ [[—à:{single_target_name}]] —Å –¥–∞—Ç–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {date_with_diff_link_s}")
                            summary_parts.append(f"[[—à:{display_name_rq}]] —É–±—Ä–∞–Ω, —Ç.–∫. –æ—Å—Ç–∞–ª–∞—Å—å –æ–¥–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞: {s_original_param} ‚Üí [[—à:{single_target_name}]] (–¥–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {date_with_diff_link_s})")

                    else: # Should not happen if was_simplified is true
                        # summary_parts.append(f"–£–ø—Ä–æ—â–µ–Ω–∏–µ [[—à:{display_name_rq}]] –¥–æ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞.")
                        summary_parts.append(f"[[—à:{display_name_rq}]] —É–±—Ä–∞–Ω, —Ç.–∫. –æ—Å—Ç–∞–ª–∞—Å—å –æ–¥–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ (–æ–¥–∏–Ω–æ—á–Ω—ã–π —à–∞–±–ª–æ–Ω).")

                else: # Not simplified, build summary as before
                    param_dates_info = []
                    
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–∏–∑ params_for_summary_build) –ø–æ –¥–∞—Ç–µ (–∏–∑ local_final_param_dates)
                    sorted_params_for_display = sorted(
                        [(p, local_final_param_dates[p]) for p in params_for_summary_build if p in local_final_param_dates],
                        key=lambda x: x[1][0]
                    )
                    
                    for param, (date, revid, trigger_name, trigger_type) in sorted_params_for_display: 
                        if param in RQ_PARAM_TEMPLATES:
                            target_template = RQ_PARAM_TEMPLATES[param]
                            iso_date = date.strftime("%Y-%m-%d")
                            
                            date_with_diff_link = f"[[Special:Diff/{revid}|{iso_date}]]"
                            details_for_summary_text = "" 
                            
                            if trigger_type == 'rq':
                                if trigger_name.lower() != param.lower(): 
                                    details_for_summary_text = f"—Ä–∞–Ω–µ–µ {trigger_name}, "
                            elif trigger_type == 'standalone':
                                if compare_template_names(trigger_name, target_template):
                                    details_for_summary_text = f"—à–∞–±–ª–æ–Ω —É–∂–µ –±—ã–ª –≤ —Å—Ç–∞—Ç—å–µ, "
                                else:
                                    details_for_summary_text = f"—Ä–µ–¥–∏—Ä–µ–∫—Ç [[—à:{trigger_name}]] —É–∂–µ –±—ã–ª –≤ —Å—Ç–∞—Ç—å–µ, "
                            
                            final_details_in_parentheses = ""
                            if details_for_summary_text:
                                final_details_in_parentheses = f"({details_for_summary_text}{date_with_diff_link})"
                            else:
                                final_details_in_parentheses = f"({date_with_diff_link})"
                            
                            param_dates_info.append(f"{param} ‚Üí [[—à:{target_template}]] {final_details_in_parentheses}")
                    
                    if param_dates_info:
                        summary_parts.append(f"–ó–∞–º–µ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ [[—à:{display_name_rq}]] –Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã —Å –¥–∞—Ç–∞–º–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {', '.join(param_dates_info)}")
                
                summary = ". ".join(summary_parts)
                return True, current_text, summary
        else:
            return False, current_text, ""
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —à–∞–±–ª–æ–Ω–∞ Rq: {e}")
        return False, current_text, ""

def find_first_appearance(page: pywikibot.Page, 
                      revisions: List[Dict], 
                      search_mode: int,
                      template_search: bool = True,  # True –¥–ª—è –ø–æ–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤, False –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Rq
                      templates_to_find: List[Tuple[str, Optional[str], Dict[str, str]]] = None,  # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
                      sections_to_track: Set[str] = None,  # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
                      template_info: Dict[str, Dict[str, str]] = None,  # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
                      rq_templates: Dict[str, str] = None,  # –î–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Rq
                      rq_params: List[str] = None  # –î–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Rq
                     ) -> Union[Tuple[Dict[str, List[str]], Dict[str, Tuple[datetime, str, Optional[str], str]]], Dict[str, Tuple[datetime, str, str]]]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —à–∞–±–ª–æ–Ω–∞ Rq –≤ —Å—Ç–∞—Ç—å–µ.
    
    Args:
        page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç—å–∏
        revisions: –°–ø–∏—Å–æ–∫ —Ä–µ–≤–∏–∑–∏–π
        search_mode: –†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ (1, 2 –∏–ª–∏ 3)
        template_search: True –¥–ª—è –ø–æ–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤, False –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Rq
        templates_to_find: –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–¥–ª—è –æ–±—ã—á–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤)
        sections_to_track: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (–¥–ª—è –æ–±—ã—á–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤)
        template_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∞–±–ª–æ–Ω–∞—Ö (–¥–ª—è –æ–±—ã—á–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤)
        rq_templates: –°–ª–æ–≤–∞—Ä—å —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ —à–∞–±–ª–æ–Ω–∞ Rq (–¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Rq)
        rq_params: –°–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —à–∞–±–ª–æ–Ω–∞ Rq –¥–ª—è –ø–æ–∏—Å–∫–∞ (–¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Rq)
        
    Returns:
        –î–ª—è template_search=True: Tuple[Dict[str, List[str]], Dict[str, Tuple[datetime, str, Optional[str], str]]]
            (section_history, template_results) - template_results —Å–æ–¥–µ—Ä–∂–∏—Ç {–∫–ª—é—á_—à–∞–±–ª–æ–Ω–∞: (timestamp, revid, section_name, variant_found)}
        –î–ª—è template_search=False: Dict[str, Tuple[datetime, str, str]]
            —Å–ª–æ–≤–∞—Ä—å {–ø–∞—Ä–∞–º–µ—Ç—Ä: (–¥–∞—Ç–∞, id_—Ä–µ–≤–∏–∑–∏–∏, –∏–º—è_–ø–∞—Ä–∞–º–µ—Ç—Ä–∞_–≤_—Ç–æ–π_—Ä–µ–≤–∏–∑–∏–∏)}
    """
    # –ï—Å–ª–∏ search_mode == 1, —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–≤–∏–∑–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç –∫–æ–Ω—Ü–∞
    if search_mode == 1:
        revisions = list(reversed(revisions))
    
    if template_search:
        # –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –∫–∞–∫ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ find_template_and_section_history
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
        section_history = {section_name: [section_name] for section_name in sections_to_track}
        current_names = {section_name: section_name for section_name in sections_to_track}
        total_sections = len(sections_to_track)
        total_revisions = len(revisions)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á–∏ –¥–ª—è templates_to_find_set –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ
        templates_to_find_set = set()
        for t_tuple in templates_to_find: # t_tuple is (template_name, section_name, variants)
            key_name_part = t_tuple[0] # normalized template name
            key_section_part = t_tuple[1] # section name or None
            current_key = f"{key_name_part}_{key_section_part}" if key_section_part is not None else f"{key_name_part}_None"
            templates_to_find_set.add(current_key)
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Ä–µ–≤–∏–∑–∏—è–º –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è —Å–±–æ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
        if sections_to_track:  # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑–¥–µ–ª—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            for rev_idx, rev in enumerate(revisions, 1):
                if 'text' not in rev or rev['text'] is None:
                    continue
                    
                text = rev['text']
                sections = find_sections(text)
                
                # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –∏—â–µ–º –µ–≥–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —ç—Ç–æ–π —Ä–µ–≤–∏–∑–∏–∏
                for section_name in sections_to_track:
                    current_name = current_names[section_name]
                
                    # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–π —Ä–∞–∑–¥–µ–ª —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –≤ —ç—Ç–æ–π —Ä–µ–≤–∏–∑–∏–∏
                    for found_name, _, _ in sections:
                        if found_name in section_history[section_name]:
                            continue
                    
                        if sections_are_similar(current_name, found_name):
                            section_history[section_name].append(found_name)
                            current_names[section_name] = found_name  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                            break
            
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5%
                if rev_idx % max(1, total_revisions // 20) == 0:
                    progress = (rev_idx / total_revisions) * 100
                    print(f"\r        üîç –ü–æ–∏—Å–∫ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–¥–µ–ª–æ–≤: {progress:.1f}%", end='', flush=True)
            
            print("\r", end='')  # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–¥–µ–ª–æ–≤
            for section_name, history in section_history.items():
                if search_mode == 1:
                    # –î–ª—è —Ä–µ–∂–∏–º–∞ 1 (–æ—Ç –∫–æ–Ω—Ü–∞) —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
                    history.reverse()
                if len(history) > 1:
                    print(f"        üìä –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–¥–µ–ª–∞ ¬´{section_name}¬ª")
                    print(f"            ‚Ü™Ô∏è {' ‚Üí '.join(history)} ‚úì")
                else:
                    print(f"        üìä –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–¥–µ–ª–∞ ¬´{section_name}¬ª (–∏—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)")
        
        print_debug(f"    ‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –¥–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤...")
        template_results = {}  # –•—Ä–∞–Ω–∏—Ç (timestamp, revid, section_name_at_addition)
        
        # –í—ã–±–∏—Ä–∞–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if search_mode == 1:  # –õ–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫ –æ—Ç –∫–æ–Ω—Ü–∞
            # templates_to_find_set —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤—ã—à–µ
            first_occurrences = {}
            revision_cache = {}
            
            # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –∏ —Å–ª–µ–¥—É—é—â–µ–π (–±–æ–ª–µ–µ –Ω–æ–≤–æ–π) —Ä–µ–≤–∏–∑–∏–∏
            templates_in_revision = {key: set() for key in templates_to_find_set}
            templates_in_next_revision = {key: set() for key in templates_to_find_set}
            
            # –°–ø–µ—Ä–≤–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é —Ä–µ–≤–∏–∑–∏—é –≤ —Å–ø–∏—Å–∫–µ (–ø–æ—Å–ª–µ–¥–Ω—é—é —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏)
            if revisions:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ä–µ–≤–∏–∑–∏—è
                if 'text' not in revisions[0] or revisions[0]['text'] is None:
                    print("        ‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–µ–≤–∏–∑–∏—è —Å—Ç–∞—Ç—å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
                    return {}, {}
                
                first_results = check_templates_in_revision(revisions[0], templates_to_find)
                revision_cache[0] = first_results
                
                # –ó–∞–ø–æ–ª–Ω—è–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ–≤–∏–∑–∏–∏
                for result_key, result_value in first_results.items():
                    result_parts = result_key.split('_', 1)
                    result_template = result_parts[0] 
                    result_section = result_parts[1] if len(result_parts) > 1 else None
                    
                    for template_key in list(templates_to_find_set):
                        template_parts = template_key.split('_', 1)
                        main_template = template_parts[0]
                        section = template_parts[1] if len(template_parts) > 1 else None
                        
                        templates_dict = next((t[2] for t in templates_to_find if t[0] == main_template), {})
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                        is_same_template = compare_template_names(result_template, main_template)
                        if not is_same_template:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã
                            for redirect in templates_dict:
                                if compare_template_names(result_template, redirect):
                                    is_same_template = True
                                    break
                        
                        is_same_section = True
                        if section and result_section:
                            is_same_section = sections_are_similar(section, result_section)
                        elif section or result_section:
                            is_same_section = False
                        
                        if is_same_template and is_same_section:
                            templates_in_next_revision[template_key].add(result_key)
            
            print(f"\r        üîç –ü–æ–∏—Å–∫ –ø–µ—Ä–≤–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ (–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ–≤–∏–∑–∏–∏)...", end='', flush=True)
            
            # –ù–∞—á–∏–Ω–∞–µ–º —Å –∏–Ω–¥–µ–∫—Å–∞ 1, —Ç–∞–∫ –∫–∞–∫ 0 - —ç—Ç–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–Ω—è—è —Ä–µ–≤–∏–∑–∏—è
            for rev_idx in range(1, len(revisions)):
                current_rev = revisions[rev_idx]

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ/—Å–∫—Ä—ã—Ç—ã–µ —Ä–µ–≤–∏–∑–∏–∏
                if 'text' not in current_rev or current_rev['text'] is None:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ä–µ–≤–∏–∑–∏–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                    # –≠—Ç–æ –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–≤–∏–∑–∏–π –ø–æ–¥—Ä—è–¥ —É–¥–∞–ª–µ–Ω—ã
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Ä–µ–≤–∏–∑–∏—é
                current_results = check_templates_in_revision(current_rev, templates_to_find)
                revision_cache[rev_idx] = current_results

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –≤ —Ç–µ–∫—É—â–µ–π —Ä–µ–≤–∏–∑–∏–∏
                templates_in_revision = {key: set() for key in templates_to_find_set}
                for result_key, result_value in current_results.items():
                    result_parts = result_key.split('_', 1)
                    result_template = result_parts[0] 
                    result_section = result_parts[1] if len(result_parts) > 1 else None
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∏—Å–∫–æ–º—ã–µ —à–∞–±–ª–æ–Ω—ã
                    for template_key in list(templates_to_find_set):
                        template_parts = template_key.split('_', 1)
                        main_template = template_parts[0]
                        section = template_parts[1] if len(template_parts) > 1 else None
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–±–ª–æ–Ω–µ –∏ –µ–≥–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞—Ö
                        templates_dict = next((t[2] for t in templates_to_find if t[0] == main_template), {})
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                        is_same_template = compare_template_names(result_template, main_template)
                        if not is_same_template:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã
                            for redirect in templates_dict:
                                if compare_template_names(result_template, redirect):
                                    is_same_template = True
                                    break
                        
                        is_same_section = True
                        if section and result_section:
                            is_same_section = sections_are_similar(section, result_section)
                        elif section or result_section:  # –û–¥–∏–Ω –µ—Å—Ç—å, –¥—Ä—É–≥–æ–≥–æ –Ω–µ—Ç
                            is_same_section = False
                        
                        # –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ—Ç –∂–µ —à–∞–±–ª–æ–Ω –∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—É—â–∏–µ —à–∞–±–ª–æ–Ω—ã
                        if is_same_template and is_same_section:
                            templates_in_revision[template_key].add(result_key)
                
                # –ù–∞—Ö–æ–¥–∏–º —à–∞–±–ª–æ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–π (–±–æ–ª–µ–µ –Ω–æ–≤–æ–π) —Ä–µ–≤–∏–∑–∏–∏, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ç–µ–∫—É—â–µ–π
                for template_key in list(templates_to_find_set):
                    if templates_in_next_revision[template_key] and not templates_in_revision[template_key]:
                        # –®–∞–±–ª–æ–Ω –µ—Å—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–π —Ä–µ–≤–∏–∑–∏–∏, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ–∫—É—â–µ–π
                        # –ó–Ω–∞—á–∏—Ç, –æ–Ω –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –º–µ–∂–¥—É —Ç–µ–∫—É—â–µ–π –∏ —Å–ª–µ–¥—É—é—â–µ–π —Ä–µ–≤–∏–∑–∏—è–º–∏
                        # –ú—ã –Ω–∞—à–ª–∏ —Ä–µ–≤–∏–∑–∏—é, –≥–¥–µ —à–∞–±–ª–æ–Ω –≤–ø–µ—Ä–≤—ã–µ –ø–æ—è–≤–∏–ª—Å—è - —ç—Ç–æ –°–õ–ï–î–£–Æ–©–ê–Ø —Ä–µ–≤–∏–∑–∏—è
                        
                        # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ä–µ–≤–∏–∑–∏–∏ –≤ —Å–ø–∏—Å–∫–µ (—Å–ª–µ–¥—É—é—â–µ–π —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏)
                        prev_rev_idx = rev_idx - 1
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Ä–µ–≤–∏–∑–∏—è –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ–Ω–∞ —Ç–µ–∫—Å—Ç
                        if prev_rev_idx < 0 or prev_rev_idx not in revision_cache:
                            continue
                            
                        prev_rev = revisions[prev_rev_idx]
                        if 'text' not in prev_rev or prev_rev['text'] is None:
                            # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Ä–µ–≤–∏–∑–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
                            continue
                            
                        prev_results = revision_cache[prev_rev_idx]
                        
                        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –∫–ª—é—á –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —à–∞–±–ª–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                        for variant_key in templates_in_next_revision[template_key]:
                            if variant_key in prev_results:
                                timestamp, revid, found_section, variant_found = prev_results[variant_key] # Unpack variant_found
                                
                                first_occurrences[template_key] = (timestamp, revid, found_section, variant_found) # Store variant_found
                                templates_to_find_set.remove(template_key)
                                
                                # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —à–∞–±–ª–æ–Ω–µ
                                template_name_for_log = next(t[0] for t in templates_to_find if (f"{t[0]}_{t[1]}" if t[1] is not None else f"{t[0]}_None") == template_key)
                                section_name_for_log = next(t[1] for t in templates_to_find if (f"{t[0]}_{t[1]}" if t[1] is not None else f"{t[0]}_None") == template_key)
                                
                                if section_name_for_log:
                                    print_debug(f"\n        ‚ú® [{template_name_for_log}] –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–≤–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´{found_section}¬ª: {timestamp.strftime('%Y-%m-%d')}")
                                else:
                                    print_debug(f"\n        ‚ú® [{template_name_for_log}] –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–≤–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞: {timestamp.strftime('%Y-%m-%d')}")
                                break
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                templates_in_next_revision = templates_in_revision
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–æ–∏—Å–∫
                if not templates_to_find_set:  # –ï—Å–ª–∏ –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫
                    break
                    
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if rev_idx % max(1, len(revisions) // 20) == 0:
                    templates_found = len(first_occurrences)
                    total_templates = len(templates_to_find)
                    progress = (rev_idx + 1) / len(revisions) * 100
                    print(f"\r        üîç –ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤: –Ω–∞–π–¥–µ–Ω–æ {templates_found}/{total_templates} ‚Ä¢ {progress:.1f}% ({rev_idx + 1}/{len(revisions)})", end='', flush=True)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–≤–æ–π —Ä–µ–≤–∏–∑–∏–∏ —Å—Ç–∞—Ç—å–∏
            # –∏ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ–æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–º–∏, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ä–µ–≤–∏–∑–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            if templates_to_find_set and len(revisions) > 0:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ä–µ–≤–∏–∑–∏—é –≤ —Å–ø–∏—Å–∫–µ (–æ–Ω–∞ –∂–µ –ø–µ—Ä–≤–∞—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏)
                last_rev_idx = len(revisions) - 1
                last_rev = revisions[last_rev_idx]
                
                # –ï—Å–ª–∏ —Ä–µ–≤–∏–∑–∏—è –µ—â—ë –Ω–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—ë
                if last_rev_idx not in revision_cache:
                    last_results = check_templates_in_revision(last_rev, templates_to_find)
                    revision_cache[last_rev_idx] = last_results
                else:
                    last_results = revision_cache[last_rev_idx]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
                for template_key in list(templates_to_find_set):
                    for result_key, result_value in last_results.items():
                        result_parts = result_key.split('_', 1)
                        result_template = result_parts[0]
                        result_section = result_parts[1] if len(result_parts) > 1 else None
                        
                        template_parts = template_key.split('_', 1)
                        main_template = template_parts[0]
                        section = template_parts[1] if len(template_parts) > 1 else None
                        
                        templates_dict = next((t[2] for t in templates_to_find if t[0] == main_template), {})
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                        is_same_template = compare_template_names(result_template, main_template)
                        if not is_same_template:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã
                            for redirect in templates_dict:
                                if compare_template_names(result_template, redirect):
                                    is_same_template = True
                                    break
                        
                        is_same_section = True
                        if section and result_section:
                            is_same_section = sections_are_similar(section, result_section)
                        elif section or result_section:
                            is_same_section = False
                        
                        if is_same_template and is_same_section:
                            # –®–∞–±–ª–æ–Ω –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–≤–æ–π —Ä–µ–≤–∏–∑–∏–∏, –∑–Ω–∞—á–∏—Ç –æ–Ω –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏
                            timestamp, revid, found_section, variant_found = result_value # Unpack variant_found
                            first_occurrences[template_key] = (timestamp, revid, found_section, variant_found) # Store variant_found
                            templates_to_find_set.remove(template_key)
                            
                            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —à–∞–±–ª–æ–Ω–µ
                            template_name_for_log = next(t[0] for t in templates_to_find if (f"{t[0]}_{t[1]}" if t[1] is not None else f"{t[0]}_None") == template_key)
                            section_name_for_log = next(t[1] for t in templates_to_find if (f"{t[0]}_{t[1]}" if t[1] is not None else f"{t[0]}_None") == template_key)
                            
                            if section_name_for_log:
                                print_debug(f"\n        ‚ú® [{template_name_for_log}] –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–≤–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´{found_section}¬ª (–¥–æ–±–∞–≤–ª–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏): {timestamp.strftime('%Y-%m-%d')}")
                            else:
                                print_debug(f"\n        ‚ú® [{template_name_for_log}] –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–≤–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ (–¥–æ–±–∞–≤–ª–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏): {timestamp.strftime('%Y-%m-%d')}")
                            break
            
            template_results = first_occurrences
            
        elif search_mode == 2:  # –õ–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫ –æ—Ç –ø–µ—Ä–≤–æ–π —Ä–µ–≤–∏–∑–∏–∏
            # templates_to_find_set —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤—ã—à–µ
            first_occurrences = {}
            revision_cache = {}
            
            for rev_idx, rev in enumerate(revisions):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ/—Å–∫—Ä—ã—Ç—ã–µ —Ä–µ–≤–∏–∑–∏–∏
                if 'text' not in rev or rev['text'] is None:
                    continue
                
                current_results = check_templates_in_revision(rev, templates_to_find)
                revision_cache[rev_idx] = current_results
                
                for template_key in list(templates_to_find_set):
                    if template_key in current_results and template_key not in first_occurrences:
                        # –ù–∞—à–ª–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –ø–µ—Ä–≤–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ
                        timestamp, revid, found_section, variant_found = current_results[template_key] # Unpack variant_found
                        first_occurrences[template_key] = (timestamp, revid, found_section, variant_found) # Store variant_found
                        templates_to_find_set.remove(template_key)
                        
                        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —à–∞–±–ª–æ–Ω–µ
                        template_name_for_log = next(t[0] for t in templates_to_find if (f"{t[0]}_{t[1]}" if t[1] is not None else f"{t[0]}_None") == template_key)
                        section_name_for_log = next(t[1] for t in templates_to_find if (f"{t[0]}_{t[1]}" if t[1] is not None else f"{t[0]}_None") == template_key)
                        if section_name_for_log:
                            print_debug(f"\n        ‚ú® [{template_name_for_log}] –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–≤–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´{found_section}¬ª: {timestamp.strftime('%Y-%m-%d')}")
                        else:
                            print_debug(f"\n        ‚ú® [{template_name_for_log}] –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–≤–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞: {timestamp.strftime('%Y-%m-%d')}")

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                templates_found = len(first_occurrences)
                total_templates = len(templates_to_find)
                print(f"\r        üîç –ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤: {templates_found}/{total_templates} (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ä–µ–≤–∏–∑–∏–π: {rev_idx + 1})", end='', flush=True)

                if not templates_to_find_set:  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
                    break
                    
            template_results = first_occurrences
            
        else:  # –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ (search_mode == 3)
            # –õ–æ–≥–∏–∫–∞ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∏–∑ find_template_and_section_history)
            first_occurrences = {}
            revision_cache = {}
            checked_revisions = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ä–µ–≤–∏–∑–∏–π
            total_revisions = len(revisions)
            start_time = time.time()
            iterations = 0
            
            # –°–æ–∑–¥–∞—ë–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            search_ranges = {}
            for t_tuple_range in templates_to_find:
                key_name_part_range = t_tuple_range[0]
                key_section_part_range = t_tuple_range[1]
                current_key_range = f"{key_name_part_range}_{key_section_part_range}" if key_section_part_range is not None else f"{key_name_part_range}_None"
                search_ranges[current_key_range] = {'left': 0, 'right': len(revisions) - 1, 'first_found': None}
            
            def check_revision(rev_idx: int) -> Dict[str, Tuple[datetime, str, str]]:
                if rev_idx < 0 or rev_idx >= total_revisions:
                    return {}  # –ó–∞—â–∏—Ç–∞ –æ—Ç –≤—ã—Ö–æ–¥–∞ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
                    
                checked_revisions.add(rev_idx)  # –û—Ç–º–µ—á–∞–µ–º —Ä–µ–≤–∏–∑–∏—é –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é
                if rev_idx in revision_cache:
                    return revision_cache[rev_idx]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ–≤–∏–∑–∏–∏
                rev = revisions[rev_idx]
                if 'text' not in rev or rev['text'] is None:
                    # –ï—Å–ª–∏ —Ä–µ–≤–∏–∑–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    revision_cache[rev_idx] = {}
                    return {}
                
                current_results = check_templates_in_revision(revisions[rev_idx], templates_to_find)
                revision_cache[rev_idx] = current_results
                return current_results
            
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫, –ø–æ–∫–∞ –µ—Å—Ç—å –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
            while search_ranges:
                iterations += 1
                if iterations % 10 == 0:
                    print(f"\r        üîç –ò—Ç–µ—Ä–∞—Ü–∏—è {iterations}: –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ {len(search_ranges)}, –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(checked_revisions)}/{total_revisions} —Ä–µ–≤–∏–∑–∏–π", end='', flush=True)
                    
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
                keys_to_remove = []
                for template_key, range_info in search_ranges.items():
                    if range_info['left'] > range_info['right']:
                        if range_info['first_found'] is not None:
                            # first_found —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ç–µ–∂–µ–º –∏–∑ 4 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                            timestamp, revid, found_section, variant_found = range_info['first_found'] # Unpack variant_found
                            first_occurrences[template_key] = (timestamp, revid, found_section, variant_found) # Store variant_found (already should be correct)
                            template_name_for_log = next((t[0] for t in templates_to_find if (f"{t[0]}_{t[1]}" if t[1] is not None else f"{t[0]}_None") == template_key), "")
                            section_name_for_log = next((t[1] for t in templates_to_find if (f"{t[0]}_{t[1]}" if t[1] is not None else f"{t[0]}_None") == template_key), None)
                            if section_name_for_log:
                                print_debug(f"\n        ‚ú® [{template_name_for_log}] –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–≤–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º '—Ä–∞–∑–¥–µ–ª' –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´{found_section}¬ª: {timestamp.strftime('%Y-%m-%d')}")
                            elif found_section: # –î–ª—è —à–∞–±–ª–æ–Ω–æ–≤ —Ä–∞–∑–¥–µ–ª–æ–≤, –≥–¥–µ section_name_for_log –º–æ–∂–µ—Ç –±—ã—Ç—å None, –µ—Å–ª–∏ t_tuple[1] –±—ã–ª None
                                print_debug(f"\n        ‚ú® [{template_name_for_log}] –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–≤–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´{found_section}¬ª: {timestamp.strftime('%Y-%m-%d')}")
                            else:
                                print_debug(f"\n        ‚ú® [{template_name_for_log}] –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–≤–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞: {timestamp.strftime('%Y-%m-%d')}")
                        keys_to_remove.append(template_key)
                
                # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
                for key in keys_to_remove:
                    search_ranges.pop(key, None)
                    
                if not search_ranges:  # –í—Å–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã
                    break
                                                    
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ç–æ—á–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É –∑–∞ —Ä–∞–∑)
                next_mid = None
                next_template_key = None
                
                # –í—ã–±–∏—Ä–∞–µ–º –æ–¥–∏–Ω –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤–º–µ—Å—Ç–æ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏)
                for template_key, range_info in search_ranges.items():
                    if range_info['left'] <= range_info['right']:
                        next_mid = (range_info['left'] + range_info['right']) // 2
                        next_template_key = template_key
                        break
                                        
                if next_mid is None:  # –ù–µ –Ω–∞—à–ª–∏ —Ç–æ—á–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                    break
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–æ—á–∫—É
                current_results = check_revision(next_mid)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
                if next_template_key not in search_ranges:
                    continue  # –®–∞–±–ª–æ–Ω –º–æ–≥ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω –≤ –¥—Ä—É–≥–æ–º –ø–æ—Ç–æ–∫–µ
                    
                range_info = search_ranges[next_template_key]
                
                if next_template_key in current_results:
                    # –ù–∞—à–ª–∏ —à–∞–±–ª–æ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ä–µ–≤–∏–∑–∏—é
                    if next_mid > 0:
                        prev_results = check_revision(next_mid - 1)
                        if next_template_key not in prev_results:
                            # –≠—Ç–æ –ø–µ—Ä–≤–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ
                            first_occurrences[next_template_key] = current_results[next_template_key]
                            search_ranges.pop(next_template_key, None)
                            timestamp, revid, found_section, variant_found = current_results[next_template_key]
                            template_name_for_log = next((t[0] for t in templates_to_find if (f"{t[0]}_{t[1]}" if t[1] is not None else f"{t[0]}_None") == next_template_key), "")
                            section_name_for_log = next((t[1] for t in templates_to_find if (f"{t[0]}_{t[1]}" if t[1] is not None else f"{t[0]}_None") == next_template_key), None)
                            if section_name_for_log:
                                print_debug(f"\n        ‚ú® [{template_name_for_log}] –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–≤–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´{found_section}¬ª: {timestamp.strftime('%Y-%m-%d')}")
                            else:
                                print_debug(f"\n        ‚ú® [{template_name_for_log}] –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–≤–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞: {timestamp.strftime('%Y-%m-%d')}")
                            continue
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø–µ—Ä–≤–æ–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫ –≤ –±–æ–ª–µ–µ —Ä–∞–Ω–Ω–∏—Ö —Ä–µ–≤–∏–∑–∏—è—Ö
                    range_info['first_found'] = current_results[next_template_key]
                    range_info['right'] = next_mid - 1
                else:
                    # –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –≤ –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω–∏—Ö —Ä–µ–≤–∏–∑–∏—è—Ö
                    range_info['left'] = next_mid + 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Ç–µ—Ä–∞—Ü–∏–π
                if iterations % 5 == 0:
                    templates_found = len(first_occurrences)
                    total_templates = len(templates_to_find)
                    checked_count = len(checked_revisions)
                    checked_percent = (checked_count / total_revisions) * 100
                    print(f"\r        üîç –ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤: {templates_found}/{total_templates} (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ä–µ–≤–∏–∑–∏–π: {checked_count}/{total_revisions}, {checked_percent:.1f}%)", end='', flush=True)
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            templates_found = len(first_occurrences)
            total_templates = len(templates_to_find)
            checked_count = len(checked_revisions)
            checked_percent = (checked_count / total_revisions) * 100
            print(f"\r        üîç –ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤: {templates_found}/{total_templates} (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ä–µ–≤–∏–∑–∏–π: {checked_count}/{total_revisions}, {checked_percent:.1f}%)", end='', flush=True)
            
            print(f"\n        üìä –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(checked_revisions)} –∏–∑ {total_revisions} —Ä–µ–≤–∏–∑–∏–π ({(len(checked_revisions) / total_revisions * 100):.1f}%)")
            print(f"        ‚è±Ô∏è –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {(time.time() - start_time):.1f} —Å–µ–∫—É–Ω–¥, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ {iterations} –∏—Ç–µ—Ä–∞—Ü–∏–π")
            
            template_results = first_occurrences
        print()
        print_debug("\n    ‚úÖ –ü–æ–∏—Å–∫ –¥–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return section_history, template_results
    
    else:
        # –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Rq –∫–∞–∫ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ find_rq_param_addition_dates
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏—è–º
        normalized_redirects = {template.lower(): template for template in rq_templates.values()}
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ {–∫–ª—é—á_–ø–∞—Ä–∞–º–µ—Ç—Ä–∞_–∏–∑_–ø–æ—Å–ª–µ–¥–Ω–µ–π_–≤–µ—Ä—Å–∏–∏: (–¥–∞—Ç–∞, id_—Ä–µ–≤–∏–∑–∏–∏, –∏–º—è_–ø–∞—Ä–∞–º–µ—Ç—Ä–∞_–≤_—Ç–æ–π_—Ä–µ–≤–∏–∑–∏–∏)}
        param_dates: Dict[str, Tuple[datetime, str, str]] = {}
        
        print_debug(f"    ‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –¥–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —à–∞–±–ª–æ–Ω–∞ Rq...")
        print_debug(f"       –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞: {', '.join(rq_params)}")
        print_debug(f"       –†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞: {search_mode} ({('–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ–≤–∏–∑–∏–∏' if search_mode == 1 else '–æ—Ç –ø–µ—Ä–≤–æ–π —Ä–µ–≤–∏–∑–∏–∏' if search_mode == 2 else '–±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫')})")
        print_debug(f"       –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≤–∏–∑–∏–π: {len(revisions)}")
        
        # --- START MODIFICATION ---
        # –î–ª—è —Ä–µ–∂–∏–º–∞ 1: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–π (—Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏) —Ä–µ–≤–∏–∑–∏–∏
        # –ö–ª—é—á–∏ - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ rq_params (—Ç.–µ. –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ —Å—Ç–∞—Ç—å–∏)
        # –ó–Ω–∞—á–µ–Ω–∏–µ - –∏–º—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑–≤–∞–ª —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏, –∏–ª–∏ None
        hist_triggers_in_next_rev: Dict[str, Optional[str]] = {lp: None for lp in rq_params}
        next_rev_timestamp = None 
        next_rev_id = None
        
        # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –∫–∞–∫–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏–∑ rq_params –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ä–µ–≤–∏–∑–∏–∏
        # –∏ –∫–∞–∫–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∏—Ö –≤—ã–∑–≤–∞–ª.
        def get_hist_triggers_for_concepts(text: Optional[str], target_rq_params_list: List[str]) -> Dict[str, Optional[str]]:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∫–ª—é—á–∏ (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏) –∫–∞–∫ None (—Ç—Ä–∏–≥–≥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω)
            hist_triggers_map: Dict[str, Optional[str]] = {lp: None for lp in target_rq_params_list}
            if text is None:
                return hist_triggers_map
            
            try:
                wikicode_rev = mwparserfromhell.parse(text)
                for template_rev in wikicode_rev.filter_templates():
                    template_name_rev_lower = str(template_rev.name).strip().lower()
                    if template_name_rev_lower in normalized_redirects: # –≠—Ç–æ Rq —à–∞–±–ª–æ–Ω
                        params_in_hist_template, _ = extract_rq_params(template_rev)
                        
                        for hist_param_name_original_case in params_in_hist_template: # –Ω–∞–ø—Ä–∏–º–µ—Ä, "source" (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä)
                            hist_param_name_lower = hist_param_name_original_case.lower()
                            if hist_param_name_lower in RQ_PARAM_TEMPLATES:
                                target_tpl_for_hist_param = RQ_PARAM_TEMPLATES[hist_param_name_lower]
                                
                                for latest_param_name in target_rq_params_list: # –Ω–∞–ø—Ä–∏–º–µ—Ä, "sources" –∏–∑ rq_params
                                    # –ï—Å–ª–∏ –¥–ª—è —ç—Ç–æ–π –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ (latest_param_name) –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç—Ä–∏–≥–≥–µ—Ä –≤ —ç—Ç–æ–π —Ä–µ–≤–∏–∑–∏–∏
                                    if hist_triggers_map[latest_param_name] is None:
                                        latest_param_name_lower = latest_param_name.lower()
                                        if latest_param_name_lower in RQ_PARAM_TEMPLATES:
                                            target_tpl_for_latest_param = RQ_PARAM_TEMPLATES[latest_param_name_lower]
                                            
                                            if target_tpl_for_hist_param == target_tpl_for_latest_param:
                                                # –ù–∞—à–ª–∏! hist_param_name_original_case —è–≤–ª—è–µ—Ç—Å—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–º –¥–ª—è –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ latest_param_name
                                                hist_triggers_map[latest_param_name] = hist_param_name_original_case
                                                # –ú–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –∑–¥–µ—Å—å `break` –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ü–∏–∫–ª–∞ –ø–æ latest_param_name,
                                                # –Ω–æ —ç—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ, —Ç.–∫. –≤–Ω–µ—à–Ω–∏–π if hist_triggers_map[latest_param_name] is None –∑–∞–±–æ—Ç–∏—Ç—Å—è –æ–± —ç—Ç–æ–º.
            except Exception: 
                pass 
            return hist_triggers_map

        # –î–ª—è —Ä–µ–∂–∏–º–∞ 1: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ hist_triggers_in_next_rev –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∞–º–æ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ–≤–∏–∑–∏–∏
        if search_mode == 1 and revisions:
            latest_chronological_rev = revisions[0]
            next_rev_timestamp = latest_chronological_rev['timestamp']
            next_rev_id = latest_chronological_rev['revid']
            if 'text' in latest_chronological_rev:
                 hist_triggers_in_next_rev = get_hist_triggers_for_concepts(latest_chronological_rev['text'], rq_params)
            else:
                print("        ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ä–µ–≤–∏–∑–∏—é –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ Rq –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")
        # --- END MODIFICATION ---
        
        # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –≤—Å–µ —Ä–µ–≤–∏–∑–∏–∏
        start_index = 1 if search_mode == 1 and revisions else 0
        for rev_idx in range(start_index, len(revisions)):
            rev = revisions[rev_idx]
            current_rev_timestamp = rev['timestamp']
            current_rev_id = rev['revid']
            
            hist_triggers_in_current_rev: Dict[str, Optional[str]]
            
            if 'text' not in rev:
                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Ä–µ–≤–∏–∑–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω–∏–∫–∞–∫–∏—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –≤ –Ω–µ–π –Ω–µ—Ç
                hist_triggers_in_current_rev = {lp: None for lp in rq_params}
                if search_mode == 1:
                    # –î–ª—è —Ä–µ–∂–∏–º–∞ 1, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è (–±–æ–ª–µ–µ —Å—Ç–∞—Ä–∞—è) —Ä–µ–≤–∏–∑–∏—è –Ω–µ –∏–º–µ–µ—Ç —Ç–µ–∫—Å—Ç–∞,
                    # –∞ —Å–ª–µ–¥—É—é—â–∞—è (–±–æ–ª–µ–µ –Ω–æ–≤–∞—è, next_rev) –∏–º–µ–ª–∞ —Ç—Ä–∏–≥–≥–µ—Ä, —Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ next_rev.
                    for param_key in rq_params:
                        trigger_in_next = hist_triggers_in_next_rev.get(param_key)
                        if param_key not in param_dates and trigger_in_next is not None:
                            param_dates[param_key] = (next_rev_timestamp, str(next_rev_id), trigger_in_next)
                            print_debug(f"        ‚ú® –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–≤–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ ¬´{param_key}¬ª (–∫–∞–∫ ¬´{trigger_in_next}¬ª): {next_rev_timestamp.strftime('%Y-%m-%d')} (–ø–µ—Ä–µ–¥ —Ä–µ–≤–∏–∑–∏–µ–π –±–µ–∑ —Ç–µ–∫—Å—Ç–∞)")
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è —ç—Ç–æ–π —Ä–µ–≤–∏–∑–∏–∏, —Ç.–∫. –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞
                # –í —Ä–µ–∂–∏–º–µ 1, —Å–æ—Å—Ç–æ—è–Ω–∏–µ next_rev –æ–±–Ω–æ–≤–∏—Ç—Å—è –Ω–∞ —ç—Ç–æ "–ø—É—Å—Ç–æ–µ" —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏.
                if search_mode == 1:
                    hist_triggers_in_next_rev = hist_triggers_in_current_rev.copy() # —Å—Ç–∞–Ω–µ—Ç {lp: None}
                    next_rev_timestamp = current_rev_timestamp # –¥–∞—Ç–∞ —ç—Ç–æ–π "–ø—É—Å—Ç–æ–π" —Ä–µ–≤–∏–∑–∏–∏
                    next_rev_id = current_rev_id
                continue

            current_text = rev['text']
            hist_triggers_in_current_rev = get_hist_triggers_for_concepts(current_text, rq_params)
            
            try:
                if search_mode == 1:
                    for param_key in rq_params:
                        trigger_in_next = hist_triggers_in_next_rev.get(param_key)
                        trigger_in_current = hist_triggers_in_current_rev.get(param_key)
                        
                        if param_key not in param_dates and trigger_in_next is not None and trigger_in_current is None:
                            param_dates[param_key] = (next_rev_timestamp, str(next_rev_id), trigger_in_next)
                            print_debug(f"        ‚ú® –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–≤–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ ¬´{param_key}¬ª (–∫–∞–∫ ¬´{trigger_in_next}¬ª): {next_rev_timestamp.strftime('%Y-%m-%d')}")
                
                elif search_mode == 2:
                    for param_key in rq_params:
                        trigger_in_current = hist_triggers_in_current_rev.get(param_key)
                        if param_key not in param_dates and trigger_in_current is not None:
                            param_dates[param_key] = (current_rev_timestamp, str(current_rev_id), trigger_in_current)
                            print_debug(f"        ‚ú® –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–≤–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ ¬´{param_key}¬ª (–∫–∞–∫ ¬´{trigger_in_current}¬ª): {current_rev_timestamp.strftime('%Y-%m-%d')}")
                
                if search_mode == 1:
                    hist_triggers_in_next_rev = hist_triggers_in_current_rev.copy()
                    next_rev_timestamp = current_rev_timestamp
                    next_rev_id = current_rev_id
                
                if len(param_dates) == len(rq_params):
                    break
                
                processed_count_display = rev_idx if search_mode == 1 and revisions else rev_idx + 1
                if processed_count_display % max(1, len(revisions) // 10) == 0:
                    print(f"\r        üîç –ü–æ–∏—Å–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: –Ω–∞–π–¥–µ–Ω–æ {len(param_dates)}/{len(rq_params)} ‚Ä¢ {processed_count_display}/{len(revisions)}", end='', flush=True)
            
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–≤–∏–∑–∏–∏ {current_rev_id}: {e}")
        
        if search_mode == 1 and revisions:
            earliest_chronological_rev = revisions[-1]
            if 'text' in earliest_chronological_rev:
                # –î–ª—è —Ä–µ–∂–∏–º–∞ 1, hist_triggers_in_next_rev –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∞–º–æ–π —Ä–∞–Ω–Ω–µ–π —Ä–µ–≤–∏–∑–∏–∏, –µ—Å–ª–∏ —Ü–∏–∫–ª –¥–æ—à–µ–ª –¥–æ –Ω–µ–µ.
                # –ù–æ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –¥–ª—è —Å–∞–º–æ–π —Ä–∞–Ω–Ω–µ–π.
                hist_triggers_in_earliest_rev = get_hist_triggers_for_concepts(earliest_chronological_rev['text'], rq_params)
                for param_key in rq_params:
                    trigger_in_earliest = hist_triggers_in_earliest_rev.get(param_key)
                    if param_key not in param_dates and trigger_in_earliest is not None:
                        param_dates[param_key] = (earliest_chronological_rev['timestamp'], str(earliest_chronological_rev['revid']), trigger_in_earliest)
                        print_debug(f"        ‚ú® –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–≤–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ ¬´{param_key}¬ª (–∫–∞–∫ ¬´{trigger_in_earliest}¬ª, –≤ —Å–∞–º–æ–π —Ä–∞–Ω–Ω–µ–π —Ä–µ–≤–∏–∑–∏–∏): {earliest_chronological_rev['timestamp'].strftime('%Y-%m-%d')}")
            
        if search_mode == 2 and revisions and (len(param_dates) < len(rq_params)):
            first_chronological_rev = revisions[0]
            if 'text' in first_chronological_rev:
                # hist_triggers_in_current_rev –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Ä–µ–≤–∏–∑–∏–∏, –µ—Å–ª–∏ —Ü–∏–∫–ª –¥–æ—à–µ–ª –¥–æ –Ω–µ–µ
                # –∏ –æ–Ω–∞ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π. –ü–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏.
                hist_triggers_in_first_rev = get_hist_triggers_for_concepts(first_chronological_rev['text'], rq_params)
                for param_key in rq_params:
                    trigger_in_first = hist_triggers_in_first_rev.get(param_key)
                    if param_key not in param_dates and trigger_in_first is not None:
                        param_dates[param_key] = (first_chronological_rev['timestamp'], str(first_chronological_rev['revid']), trigger_in_first)
                        print_debug(f"        ‚ú® –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–≤–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ ¬´{param_key}¬ª (–∫–∞–∫ ¬´{trigger_in_first}¬ª, –≤ –ø–µ—Ä–≤–æ–π —Ä–µ–≤–∏–∑–∏–∏): {first_chronological_rev['timestamp'].strftime('%Y-%m-%d')}")
        print()
        print_debug(f"\n    ‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞—Ç—ã –¥–ª—è {len(param_dates)}/{len(rq_params)} –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —à–∞–±–ª–æ–Ω–∞ Rq")
        return param_dates

def normalize_rq_topic_value(topic_value: str) -> str:
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ topic= –¥–ª—è —à–∞–±–ª–æ–Ω–∞ Rq.
    –ü—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ –∏—â–µ—Ç –≤ RQ_TOPIC_NORMALIZATION_MAP.
    –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
    –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ topic_value (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º).
    """
    topic_value_lower = topic_value.lower()
    if topic_value_lower in RQ_TOPIC_NORMALIZATION_MAP:
        return RQ_TOPIC_NORMALIZATION_MAP[topic_value_lower]
    return topic_value # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å –µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–æ–º, –µ—Å–ª–∏ –Ω–µ—Ç –≤ –∫–∞—Ä—Ç–µ

def handle_debug_save_interaction(page: pywikibot.Page, new_text: str, summary: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏.
    """
    print(f"üîÑ –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∞–≤–∫–∏: {summary}")
    while True:
        print("\n–î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:")
        print("1 - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç—å—é")
        print("2 - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ")
        print("3 - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏")
        
        response = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è (1/2/3): ").strip()
        
        if response == "1":
            if not summary: 
                print("\n‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–æ–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ).")
                break
            try:
                page.text = new_text
                page.save(summary=summary, minor=True)
                print(f"\n‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç—å–µ ¬´{page.title()}¬ª")
            except Exception as e:
                print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏: {e}")
            break
        elif response == "2":
            print("\n–ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ.")
            break
        elif response == "3":
            print("\nüìÑ –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏:")
            print("=" * 100)
            print(new_text)
            print("=" * 100)
        else:
            print("\n‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3.")

def handle_debug_mode(site: pywikibot.Site):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–æ–≥–∏–∫—É –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è –æ–¥–Ω–æ–π —Å—Ç–∞—Ç—å–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–µ–∫—É—â–∏–º CONFIG['mode'].
    """
    print(f"\nüîç –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—å–∏: {CONFIG['debug_article']} (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–≥–∏–∫–∞ —Ä–µ–∂–∏–º–∞: {CONFIG['mode']})")
    page = pywikibot.Page(site, CONFIG['debug_article'])
    if not page.exists():
        print("‚ùå –£–∫–∞–∑–∞–Ω–Ω–∞—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å—Ç–∞—Ç—å—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return

    debug_templates_for_meta_single = {} 
    if CONFIG['mode'] == 'single' or CONFIG['mode'] == 'meta' or (CONFIG['mode'] == 'metarq'):
        category_source_for_templates = CONFIG['single_category']
        if CONFIG['mode'] == 'meta':
             print(f"‚ÑπÔ∏è –í —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ 'meta' –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —à–∞–±–ª–æ–Ω—ã –∏–∑ '{category_source_for_templates}' –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.")
        elif CONFIG['mode'] == 'metarq':
             print(f"‚ÑπÔ∏è –í —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ 'metarq', –¥–ª—è –º–µ—Ç–∞-—á–∞—Å—Ç–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —à–∞–±–ª–æ–Ω—ã –∏–∑ '{category_source_for_templates}'.")

        category_page = pywikibot.Page(site, category_source_for_templates)
        if category_page.exists():
            debug_templates_for_meta_single = get_templates_from_category(site, category_page)
            if debug_templates_for_meta_single:
                 print(f"‚ÑπÔ∏è –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —à–∞–±–ª–æ–Ω—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_source_for_templates}':")
                 for template, redirects in debug_templates_for_meta_single.items():
                    template_cap = template[0].upper() + template[1:]
                    redirect_list = [r[0].upper() + r[1:] for r in redirects if r != template]
                    print(f"    üîµ ¬´{template_cap}¬ª" + (f" (—Ä–µ–¥–∏—Ä–µ–∫—Ç—ã: {', '.join(redirect_list)})" if redirect_list else ""))
            else:
                print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã —à–∞–±–ª–æ–Ω—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_source_for_templates}' –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.")
        else:
            print(f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_source_for_templates}' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

    creation_date = page.oldest_revision.timestamp
    revision_count = page.revision_count()
    print_article_header(page, creation_date, revision_count, 1, 1, 1, 1, 1, 1)
    print("=" * 100)

    if CONFIG['mode'] == 'metarq':
        print("\n--- –û—Ç–ª–∞–¥–∫–∞: –≠—Ç–∞–ø 1 (Meta-–ª–æ–≥–∏–∫–∞) ---")
        success1, _, _, _, update_info1, _ = process_article_with_limit(
            page, debug_templates_for_meta_single, CONFIG['search_mode'], CONFIG['max_revisions'], revision_count,
            should_process_rq=False
        )
        if update_info1:
            handle_debug_save_interaction(page, update_info1[0], update_info1[1])
        else:
            print("‚ÑπÔ∏è –û—Ç–ª–∞–¥–∫–∞ (–≠—Ç–∞–ø 1 - Meta-–ª–æ–≥–∏–∫–∞): –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏, –µ—Å–ª–∏ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if update_info1 and CONFIG['autosave']: # –ò–ª–∏ –µ—Å–ª–∏ –±—ã–ª —Ä—É—á–Ω–æ–π —Å–µ–π–≤, –Ω–æ —ç—Ç–æ —Å–ª–æ–∂–Ω–µ–µ –æ—Ç—Å–ª–µ–¥–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è handle_debug_save_interaction
             page = pywikibot.Page(site, CONFIG['debug_article']) # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞

        print("\n--- –û—Ç–ª–∞–¥–∫–∞: –≠—Ç–∞–ø 2 (Rq-–ª–æ–≥–∏–∫–∞) ---")
        success2, _, _, _, update_info2, _ = process_article_with_limit(
            page, {}, CONFIG['search_mode'], CONFIG['max_revisions'], revision_count,
            should_process_rq=True
        )
        if update_info2:
            handle_debug_save_interaction(page, update_info2[0], update_info2[1])
        else:
            print("‚ÑπÔ∏è –û—Ç–ª–∞–¥–∫–∞ (–≠—Ç–∞–ø 2 - Rq-–ª–æ–≥–∏–∫–∞): –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
    else: 
        current_debug_templates_for_call = {}
        _should_process_rq_debug = False # Default for unknown

        if CONFIG['mode'] == 'rq':
            _should_process_rq_debug = True
        elif CONFIG['mode'] == 'meta' or CONFIG['mode'] == 'single':
            _should_process_rq_debug = False
            current_debug_templates_for_call = debug_templates_for_meta_single
        else: # Unknown mode
            print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º '{CONFIG['mode']}' –≤ –ª–æ–≥–∏–∫–µ –æ—Ç–ª–∞–¥–∫–∏. –û–±—Ä–∞–±–æ—Ç–∫–∞ Rq –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞ (process_rq = False).")
            _should_process_rq_debug = False
            # current_debug_templates_for_call –æ—Å—Ç–∞–µ—Ç—Å—è {}, —Ç–∞–∫ –∫–∞–∫ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ, –∫–∞–∫–∏–µ —à–∞–±–ª–æ–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å

        print(f"--- –û—Ç–ª–∞–¥–∫–∞: –õ–æ–≥–∏–∫–∞ —Ä–µ–∂–∏–º–∞ '{CONFIG['mode']}' (process_rq: {_should_process_rq_debug}) ---")
        success, _, _, _, update_info, _ = process_article_with_limit(
            page, current_debug_templates_for_call, CONFIG['search_mode'], CONFIG['max_revisions'], revision_count,
            should_process_rq=_should_process_rq_debug
        )
        if update_info:
            handle_debug_save_interaction(page, update_info[0], update_info[1])
        else:
            print(f"‚ÑπÔ∏è –û—Ç–ª–∞–¥–∫–∞ (–õ–æ–≥–∏–∫–∞ —Ä–µ–∂–∏–º–∞ '{CONFIG['mode']}'): –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π.")

def main():
    global RQ_STANDALONE_REDIRECT_CACHE
    site = pywikibot.Site('ru', 'wikipedia')
    print("üîë –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É...")
    site.login()
    print("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    
    RQ_STANDALONE_REDIRECT_CACHE = load_rq_redirect_cache_from_json(RQ_STANDALONE_REDIRECT_CACHE_FILE)
    
    if not RQ_STANDALONE_REDIRECT_CACHE:
        print("‚ÑπÔ∏è –ö—ç—à —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ RQ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–∑ RQ_PARAM_TEMPLATES...")
        unique_target_templates = set(RQ_PARAM_TEMPLATES.values())
        
        if unique_target_templates:
            total_templates_to_cache = len(unique_target_templates)
            cached_count = 0
            print_debug(f"    üîç –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è: {total_templates_to_cache}")

            for template_name_val in unique_target_templates:
                if template_name_val:
                    get_template_redirects(site, template_name_val, use_rq_specific_cache=True)
                    cached_count += 1
                    if cached_count % 5 == 0 or cached_count == total_templates_to_cache:
                        print_debug(f"        üîÑ –ü—Ä–æ–≥—Ä–µ—Å—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è: {cached_count}/{total_templates_to_cache} —à–∞–±–ª–æ–Ω–æ–≤...")
            print("‚úÖ –ö—ç—à —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ RQ –∑–∞–ø–æ–ª–Ω–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
        else:
            print("    ‚ö†Ô∏è –í RQ_PARAM_TEMPLATES –Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è.")

    if CONFIG['debug_article']:
        handle_debug_mode(site)
        return

    category_templates = {}
    category_counts = {}

    if CONFIG['mode'] == 'single':
        CONFIG['process_rq'] = False
        print(f"\nüîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {CONFIG['single_category']} (—Ç–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞)...")
        category = pywikibot.Page(site, CONFIG['single_category'])
        if not category.exists():
            print("‚ùå –£–∫–∞–∑–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return

        templates = get_templates_from_category(site, category)
        if not templates:
            print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã —à–∞–±–ª–æ–Ω—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            return

        article_count = len(list(pywikibot.Category(site, CONFIG['single_category']).articles()))
        category_templates = {CONFIG['single_category']: templates}
        category_counts = {CONFIG['single_category']: article_count}
        
        for template, redirects in templates.items():
            template_cap = template[0].upper() + template[1:]
            redirect_list = [r[0].upper() + r[1:] for r in redirects if r != template]
            print(f"üîµ ¬´{template_cap}¬ª")
            if redirect_list:
                print(f"       ‚Ü™Ô∏è {', '.join(redirect_list)}")
                
        print(f"\nüìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç {article_count} —Å—Ç–∞—Ç–µ–π")
        process_articles(site, category_templates, CONFIG['search_mode'], category_counts,
                         process_rq_for_this_run=False)

    elif CONFIG['mode'] == 'meta':
        CONFIG['process_rq'] = False
        print(f"\nüîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–∞–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {CONFIG['meta_category']} (—Ç–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞)...")
        active_categories_with_counts = get_active_subcategories(site, CONFIG['meta_category'])
        if not active_categories_with_counts:
            print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            return

        print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ {len(active_categories_with_counts)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π:")
        for category_name, count in active_categories_with_counts:
            category_counts[category_name] = count
            print(f"    ‚Ä¢ {category_name} ({count} —Å—Ç–∞—Ç–µ–π)")
        
        active_categories = [cat for cat, _ in active_categories_with_counts]
        category_templates = get_templates_by_categories(site, active_categories)

        if not category_templates:
            print("\n‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã —à–∞–±–ª–æ–Ω—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö")
            return
        process_articles(site, category_templates, CONFIG['search_mode'], category_counts,
                         process_rq_for_this_run=False)

    elif CONFIG['mode'] == 'rq':
        CONFIG['process_rq'] = True
        print(f"\nüîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —à–∞–±–ª–æ–Ω–∞–º–∏ Rq: {CONFIG['rq_category']} (—Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ Rq)...")
        rq_category_page = pywikibot.Page(site, CONFIG['rq_category'])
        if not rq_category_page.exists():
            print("‚ùå –£–∫–∞–∑–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return

        templates = {} # –®–∞–±–ª–æ–Ω—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω—É–∂–Ω—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ Rq
        article_count = len(list(pywikibot.Category(site, CONFIG['rq_category']).articles()))
        category_templates = {CONFIG['rq_category']: templates}
        category_counts = {CONFIG['rq_category']: article_count}

        print(f"\nüìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç {article_count} —Å—Ç–∞—Ç–µ–π")
        process_articles(site, category_templates, CONFIG['search_mode'], category_counts,
                         process_rq_for_this_run=True)

    elif CONFIG['mode'] == 'metarq':
        print("\nüöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ 'metarq'")
        print("-" * 30)
        print("–≠—Ç–∞–ø 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ 'meta_category' (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞)")
        print("-" * 30)
        CONFIG['process_rq'] = False
        meta_category_templates = {}
        meta_category_counts = {}

        print(f"\nüîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–∞–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {CONFIG['meta_category']}...")
        active_categories_with_counts_meta = get_active_subcategories(site, CONFIG['meta_category'])
        if not active_categories_with_counts_meta:
            print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –º–µ—Ç–∞–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        else:
            print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ {len(active_categories_with_counts_meta)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π:")
            for category_name, count in active_categories_with_counts_meta:
                meta_category_counts[category_name] = count
                print(f"    ‚Ä¢ {category_name} ({count} —Å—Ç–∞—Ç–µ–π)")

            active_categories_meta = [cat for cat, _ in active_categories_with_counts_meta]
            meta_category_templates = get_templates_by_categories(site, active_categories_meta)

            if not meta_category_templates:
                print("\n‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã —à–∞–±–ª–æ–Ω—ã –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –º–µ—Ç–∞–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
            else:
                print("\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–≠—Ç–∞–ø 1 - Meta):")
                total_articles_meta = sum(meta_category_counts.values())
                total_templates_meta = sum(len(cat_templates) for cat_templates in meta_category_templates.values())
                total_redirects_meta = 0
                for cat_templates in meta_category_templates.values():
                    for template, redirects in cat_templates.items():
                        total_redirects_meta += len([r for r in redirects if r != template])

                print(f"  ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(meta_category_templates)}")
                print(f"  ‚Ä¢ –®–∞–±–ª–æ–Ω–æ–≤: {total_templates_meta}")
                print(f"  ‚Ä¢ –†–µ–¥–∏—Ä–µ–∫—Ç–æ–≤: {total_redirects_meta}")
                print(f"  ‚Ä¢ –°—Ç–∞—Ç–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_articles_meta}")

                print("\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç–∞—Ç–µ–π (–≠—Ç–∞–ø 1 - Meta)...")
                process_articles(site, meta_category_templates, CONFIG['search_mode'], meta_category_counts,
                                 process_rq_for_this_run=False)
                print("\n‚úÖ –≠—Ç–∞–ø 1 (Meta) –∑–∞–≤–µ—Ä—à–µ–Ω.")

        print("-" * 30)
        print(f"–≠—Ç–∞–ø 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{CONFIG['rq_category']}' (—Ç–æ–ª—å–∫–æ Rq)")
        print("-" * 30)
        CONFIG['process_rq'] = True
        rq_category_templates_metarq = {} # Renamed to avoid conflict
        rq_category_counts_metarq = {}    # Renamed to avoid conflict

        print(f"\nüîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —à–∞–±–ª–æ–Ω–∞–º–∏ Rq: {CONFIG['rq_category']}...")
        rq_category_page_metarq = pywikibot.Page(site, CONFIG['rq_category'])
        if not rq_category_page_metarq.exists():
            print("‚ùå –£–∫–∞–∑–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è Rq –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫ —ç—Ç–∞–ø–∞ 2.")
        else:
            templates_rq_metarq = {} # Renamed to avoid conflict
            article_count_rq_metarq = len(list(pywikibot.Category(site, CONFIG['rq_category']).articles())) # Renamed
            rq_category_templates_metarq = {CONFIG['rq_category']: templates_rq_metarq}
            rq_category_counts_metarq = {CONFIG['rq_category']: article_count_rq_metarq}

            print(f"\nüìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è Rq —Å–æ–¥–µ—Ä–∂–∏—Ç {article_count_rq_metarq} —Å—Ç–∞—Ç–µ–π")
            print("\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç–∞—Ç–µ–π (–≠—Ç–∞–ø 2 - Rq)...")
            process_articles(site, rq_category_templates_metarq, CONFIG['search_mode'], rq_category_counts_metarq,
                             process_rq_for_this_run=True)
            print("\n‚úÖ –≠—Ç–∞–ø 2 (Rq) –∑–∞–≤–µ—Ä—à–µ–Ω.")
        print("\n‚úÖ –†–µ–∂–∏–º 'metarq' –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω.")

    else:
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {CONFIG['mode']}")
        print("–î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 'single', 'meta', 'rq' –∏–ª–∏ 'metarq'")

if __name__ == "__main__":
    main()